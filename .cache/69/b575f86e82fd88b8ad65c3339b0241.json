{"id":"wlvc","dependencies":[{"name":"/project/deck-gl-examples-01/node_modules/@loaders.gl/images/dist/esm/lib/parsers/parse-to-node-image.js.map","includedInParent":true,"mtime":1688284131151},{"name":"/project/deck-gl-examples-01/package.json","includedInParent":true,"mtime":1688495957541},{"name":"/project/deck-gl-examples-01/node_modules/@loaders.gl/images/package.json","includedInParent":true,"mtime":1688284131151},{"name":"@loaders.gl/loader-utils","loc":{"line":1,"column":23,"index":23},"parent":"/project/deck-gl-examples-01/node_modules/@loaders.gl/images/dist/esm/lib/parsers/parse-to-node-image.js","resolved":"/project/deck-gl-examples-01/node_modules/@loaders.gl/loader-utils/dist/esm/index.js"},{"name":"../category-api/binary-image-api","loc":{"line":2,"column":39,"index":90},"parent":"/project/deck-gl-examples-01/node_modules/@loaders.gl/images/dist/esm/lib/parsers/parse-to-node-image.js","resolved":"/project/deck-gl-examples-01/node_modules/@loaders.gl/images/dist/esm/lib/category-api/binary-image-api.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=r;var e=require(\"@loaders.gl/loader-utils\"),a=require(\"../category-api/binary-image-api\");async function r(r,t){const{mimeType:i}=(0,a.getBinaryImageMetadata)(r)||{},s=globalThis._parseImageNode;return(0,e.assert)(s),await s(r,i)}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":null,"original":{"line":32,"column":0},"generated":{"line":1,"column":0}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":null,"original":{"line":32,"column":0},"generated":{"line":1,"column":13}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":null,"original":{"line":32,"column":0},"generated":{"line":1,"column":20}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":null,"original":{"line":32,"column":0},"generated":{"line":1,"column":35}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":null,"original":{"line":32,"column":0},"generated":{"line":1,"column":43}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":null,"original":{"line":32,"column":0},"generated":{"line":1,"column":56}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":null,"original":{"line":32,"column":0},"generated":{"line":1,"column":57}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":null,"original":{"line":32,"column":0},"generated":{"line":1,"column":64}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":null,"original":{"line":32,"column":0},"generated":{"line":1,"column":68}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":null,"original":{"line":32,"column":0},"generated":{"line":1,"column":76}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":null,"original":{"line":32,"column":0},"generated":{"line":1,"column":84}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":86}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":90}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":92}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":100}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":128}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":130}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":138}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":null,"original":{"line":20,"column":15},"generated":{"line":1,"column":174}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":"parseToNodeImage","original":{"line":20,"column":30},"generated":{"line":1,"column":189}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":"arrayBuffer","original":{"line":21,"column":2},"generated":{"line":1,"column":191}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":"options","original":{"line":22,"column":2},"generated":{"line":1,"column":193}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":null,"original":{"line":24,"column":2},"generated":{"line":1,"column":196}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":null,"original":{"line":24,"column":8},"generated":{"line":1,"column":202}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":"mimeType","original":{"line":24,"column":9},"generated":{"line":1,"column":211}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":"getBinaryImageMetadata","original":{"line":24,"column":21},"generated":{"line":1,"column":215}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":"getBinaryImageMetadata","original":{"line":24,"column":21},"generated":{"line":1,"column":217}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":null,"original":{"line":24,"column":43},"generated":{"line":1,"column":219}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":"arrayBuffer","original":{"line":24,"column":44},"generated":{"line":1,"column":243}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":null,"original":{"line":24,"column":60},"generated":{"line":1,"column":247}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":"_parseImageNode","original":{"line":27,"column":8},"generated":{"line":1,"column":250}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":"globalThis","original":{"line":27,"column":42},"generated":{"line":1,"column":252}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":"_parseImageNode","original":{"line":27,"column":53},"generated":{"line":1,"column":263}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":null,"original":{"line":31,"column":2},"generated":{"line":1,"column":279}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":"assert","original":{"line":28,"column":2},"generated":{"line":1,"column":286}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":"assert","original":{"line":28,"column":2},"generated":{"line":1,"column":288}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":null,"original":{"line":28,"column":8},"generated":{"line":1,"column":290}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":"_parseImageNode","original":{"line":28,"column":9},"generated":{"line":1,"column":298}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":"_parseImageNode","original":{"line":31,"column":15},"generated":{"line":1,"column":307}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":"arrayBuffer","original":{"line":31,"column":31},"generated":{"line":1,"column":309}},{"source":"../../../../src/lib/parsers/parse-to-node-image.ts","name":"mimeType","original":{"line":31,"column":44},"generated":{"line":1,"column":311}}],"sources":{"../../../../src/lib/parsers/parse-to-node-image.ts":"import type {ImageLoaderOptions} from '../../image-loader';\nimport type {ImageDataType} from '../../types';\nimport {assert} from '@loaders.gl/loader-utils';\nimport {getBinaryImageMetadata} from '../category-api/binary-image-api';\n\n// Note: These types should be consistent with loaders.gl/polyfills\n\ntype NDArray = {\n  shape: number[];\n  data: Uint8Array;\n  width: number;\n  height: number;\n  components: number;\n  layers: number[];\n};\n\ntype ParseImageNode = (arrayBuffer: ArrayBuffer, mimeType: string) => Promise<NDArray>;\n\n// Use polyfills if installed to parsed image using get-pixels\nexport default async function parseToNodeImage(\n  arrayBuffer: ArrayBuffer,\n  options: ImageLoaderOptions\n): Promise<ImageDataType> {\n  const {mimeType} = getBinaryImageMetadata(arrayBuffer) || {};\n\n  // @ts-ignore\n  const _parseImageNode: ParseImageNode = globalThis._parseImageNode;\n  assert(_parseImageNode); // '@loaders.gl/polyfills not installed'\n\n  // @ts-expect-error TODO should we throw error in this case?\n  return await _parseImageNode(arrayBuffer, mimeType);\n}\n"},"lineCount":null}},"error":null,"hash":"8cbb7b0408558faa1821ebecb2fccb03","cacheData":{"env":{}}}