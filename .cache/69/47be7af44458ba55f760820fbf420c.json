{"id":"PBJe","dependencies":[{"name":"/project/deck-gl-examples-01/node_modules/@deck.gl/layers/dist/esm/point-cloud-layer/point-cloud-layer-vertex.glsl.js.map","includedInParent":true,"mtime":1688284132821},{"name":"/project/deck-gl-examples-01/package.json","includedInParent":true,"mtime":1688495957541},{"name":"/project/deck-gl-examples-01/node_modules/@deck.gl/layers/package.json","includedInParent":true,"mtime":1688284132821}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=void 0;var o=\"#define SHADER_NAME point-cloud-layer-vertex-shader\\n\\nattribute vec3 positions;\\nattribute vec3 instanceNormals;\\nattribute vec4 instanceColors;\\nattribute vec3 instancePositions;\\nattribute vec3 instancePositions64Low;\\nattribute vec3 instancePickingColors;\\n\\nuniform float opacity;\\nuniform float radiusPixels;\\nuniform int sizeUnits;\\n\\nvarying vec4 vColor;\\nvarying vec2 unitPosition;\\n\\nvoid main(void) {\\n  geometry.worldPosition = instancePositions;\\n  geometry.normal = project_normal(instanceNormals);\\n  unitPosition = positions.xy;\\n  geometry.uv = unitPosition;\\n  geometry.pickingColor = instancePickingColors;\\n  vec3 offset = vec3(positions.xy * project_size_to_pixel(radiusPixels, sizeUnits), 0.0);\\n  DECKGL_FILTER_SIZE(offset, geometry);\\n\\n  gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.), geometry.position);\\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\\n  gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);\\n  vec3 lightColor = lighting_getLightColor(instanceColors.rgb, project_uCameraPosition, geometry.position.xyz, geometry.normal);\\n  vColor = vec4(lightColor, instanceColors.a * opacity);\\n  DECKGL_FILTER_COLOR(vColor, geometry);\\n}\\n\";exports.default=o;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/point-cloud-layer/point-cloud-layer-vertex.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":0}},{"source":"../../../src/point-cloud-layer/point-cloud-layer-vertex.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":13}},{"source":"../../../src/point-cloud-layer/point-cloud-layer-vertex.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":20}},{"source":"../../../src/point-cloud-layer/point-cloud-layer-vertex.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":35}},{"source":"../../../src/point-cloud-layer/point-cloud-layer-vertex.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":43}},{"source":"../../../src/point-cloud-layer/point-cloud-layer-vertex.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":56}},{"source":"../../../src/point-cloud-layer/point-cloud-layer-vertex.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":57}},{"source":"../../../src/point-cloud-layer/point-cloud-layer-vertex.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":64}},{"source":"../../../src/point-cloud-layer/point-cloud-layer-vertex.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":68}},{"source":"../../../src/point-cloud-layer/point-cloud-layer-vertex.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":76}},{"source":"../../../src/point-cloud-layer/point-cloud-layer-vertex.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":89}},{"source":"../../../src/point-cloud-layer/point-cloud-layer-vertex.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":91}},{"source":"../../../src/point-cloud-layer/point-cloud-layer-vertex.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":95}},{"source":"../../../src/point-cloud-layer/point-cloud-layer-vertex.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":97}},{"source":"../../../src/point-cloud-layer/point-cloud-layer-vertex.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":1332}},{"source":"../../../src/point-cloud-layer/point-cloud-layer-vertex.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":1340}},{"source":"../../../src/point-cloud-layer/point-cloud-layer-vertex.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":1348}}],"sources":{"../../../src/point-cloud-layer/point-cloud-layer-vertex.glsl.ts":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME point-cloud-layer-vertex-shader\n\nattribute vec3 positions;\nattribute vec3 instanceNormals;\nattribute vec4 instanceColors;\nattribute vec3 instancePositions;\nattribute vec3 instancePositions64Low;\nattribute vec3 instancePickingColors;\n\nuniform float opacity;\nuniform float radiusPixels;\nuniform int sizeUnits;\n\nvarying vec4 vColor;\nvarying vec2 unitPosition;\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n  geometry.normal = project_normal(instanceNormals);\n\n  // position on the containing square in [-1, 1] space\n  unitPosition = positions.xy;\n  geometry.uv = unitPosition;\n  geometry.pickingColor = instancePickingColors;\n\n  // Find the center of the point and add the current vertex\n  vec3 offset = vec3(positions.xy * project_size_to_pixel(radiusPixels, sizeUnits), 0.0);\n  DECKGL_FILTER_SIZE(offset, geometry);\n\n  gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.), geometry.position);\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);\n\n  // Apply lighting\n  vec3 lightColor = lighting_getLightColor(instanceColors.rgb, project_uCameraPosition, geometry.position.xyz, geometry.normal);\n\n  // Apply opacity to instance color, or return instance picking color\n  vColor = vec4(lightColor, instanceColors.a * opacity);\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n`;\n"},"lineCount":null}},"error":null,"hash":"36f2f24d0fe59af6b2b0b81b57e6975c","cacheData":{"env":{}}}