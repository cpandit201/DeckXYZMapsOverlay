{"id":"bRsz","dependencies":[{"name":"/project/deck-gl-examples-01/node_modules/@luma.gl/shadertools/dist/esm/modules/phong-lighting/phong-lighting.glsl.js.map","includedInParent":true,"mtime":1688284132458},{"name":"/project/deck-gl-examples-01/package.json","includedInParent":true,"mtime":1688495957541},{"name":"/project/deck-gl-examples-01/node_modules/@luma.gl/shadertools/package.json","includedInParent":true,"mtime":1688284132458}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=void 0;var i=\"\\nuniform float lighting_uAmbient;\\nuniform float lighting_uDiffuse;\\nuniform float lighting_uShininess;\\nuniform vec3  lighting_uSpecularColor;\\n\\nvec3 lighting_getLightColor(vec3 surfaceColor, vec3 light_direction, vec3 view_direction, vec3 normal_worldspace, vec3 color) {\\n    vec3 halfway_direction = normalize(light_direction + view_direction);\\n    float lambertian = dot(light_direction, normal_worldspace);\\n    float specular = 0.0;\\n    if (lambertian > 0.0) {\\n      float specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);\\n      specular = pow(specular_angle, lighting_uShininess);\\n    }\\n    lambertian = max(lambertian, 0.0);\\n    return (lambertian * lighting_uDiffuse * surfaceColor + specular * lighting_uSpecularColor) * color;\\n}\\n\\nvec3 lighting_getLightColor(vec3 surfaceColor, vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {\\n  vec3 lightColor = surfaceColor;\\n\\n  if (lighting_uEnabled) {\\n    vec3 view_direction = normalize(cameraPosition - position_worldspace);\\n    lightColor = lighting_uAmbient * surfaceColor * lighting_uAmbientLight.color;\\n\\n    for (int i = 0; i < MAX_LIGHTS; i++) {\\n      if (i >= lighting_uPointLightCount) {\\n        break;\\n      }\\n      PointLight pointLight = lighting_uPointLight[i];\\n      vec3 light_position_worldspace = pointLight.position;\\n      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);\\n      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);\\n    }\\n\\n    for (int i = 0; i < MAX_LIGHTS; i++) {\\n      if (i >= lighting_uDirectionalLightCount) {\\n        break;\\n      }\\n      DirectionalLight directionalLight = lighting_uDirectionalLight[i];\\n      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\\n    }\\n  }\\n  return lightColor;\\n}\\n\\nvec3 lighting_getSpecularLightColor(vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {\\n  vec3 lightColor = vec3(0, 0, 0);\\n  vec3 surfaceColor = vec3(0, 0, 0);\\n\\n  if (lighting_uEnabled) {\\n    vec3 view_direction = normalize(cameraPosition - position_worldspace);\\n\\n    for (int i = 0; i < MAX_LIGHTS; i++) {\\n      if (i >= lighting_uPointLightCount) {\\n        break;\\n      }\\n      PointLight pointLight = lighting_uPointLight[i];\\n      vec3 light_position_worldspace = pointLight.position;\\n      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);\\n      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);\\n    }\\n\\n    for (int i = 0; i < MAX_LIGHTS; i++) {\\n      if (i >= lighting_uDirectionalLightCount) {\\n        break;\\n      }\\n      DirectionalLight directionalLight = lighting_uDirectionalLight[i];\\n      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\\n    }\\n  }\\n  return lightColor;\\n}\\n\";exports.default=i;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/modules/phong-lighting/phong-lighting.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../../../src/modules/phong-lighting/phong-lighting.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":13}},{"source":"../../../../src/modules/phong-lighting/phong-lighting.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":20}},{"source":"../../../../src/modules/phong-lighting/phong-lighting.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":35}},{"source":"../../../../src/modules/phong-lighting/phong-lighting.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":43}},{"source":"../../../../src/modules/phong-lighting/phong-lighting.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":56}},{"source":"../../../../src/modules/phong-lighting/phong-lighting.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":57}},{"source":"../../../../src/modules/phong-lighting/phong-lighting.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":64}},{"source":"../../../../src/modules/phong-lighting/phong-lighting.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":68}},{"source":"../../../../src/modules/phong-lighting/phong-lighting.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":76}},{"source":"../../../../src/modules/phong-lighting/phong-lighting.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":89}},{"source":"../../../../src/modules/phong-lighting/phong-lighting.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":91}},{"source":"../../../../src/modules/phong-lighting/phong-lighting.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":95}},{"source":"../../../../src/modules/phong-lighting/phong-lighting.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":97}},{"source":"../../../../src/modules/phong-lighting/phong-lighting.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":3189}},{"source":"../../../../src/modules/phong-lighting/phong-lighting.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":3197}},{"source":"../../../../src/modules/phong-lighting/phong-lighting.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":3205}}],"sources":{"../../../../src/modules/phong-lighting/phong-lighting.glsl.js":"export default `\\\n\nuniform float lighting_uAmbient;\nuniform float lighting_uDiffuse;\nuniform float lighting_uShininess;\nuniform vec3  lighting_uSpecularColor;\n\nvec3 lighting_getLightColor(vec3 surfaceColor, vec3 light_direction, vec3 view_direction, vec3 normal_worldspace, vec3 color) {\n    vec3 halfway_direction = normalize(light_direction + view_direction);\n    float lambertian = dot(light_direction, normal_worldspace);\n    float specular = 0.0;\n    if (lambertian > 0.0) {\n      float specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);\n      specular = pow(specular_angle, lighting_uShininess);\n    }\n    lambertian = max(lambertian, 0.0);\n    return (lambertian * lighting_uDiffuse * surfaceColor + specular * lighting_uSpecularColor) * color;\n}\n\nvec3 lighting_getLightColor(vec3 surfaceColor, vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {\n  vec3 lightColor = surfaceColor;\n\n  if (lighting_uEnabled) {\n    vec3 view_direction = normalize(cameraPosition - position_worldspace);\n    lightColor = lighting_uAmbient * surfaceColor * lighting_uAmbientLight.color;\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting_uPointLightCount) {\n        break;\n      }\n      PointLight pointLight = lighting_uPointLight[i];\n      vec3 light_position_worldspace = pointLight.position;\n      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);\n      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);\n    }\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting_uDirectionalLightCount) {\n        break;\n      }\n      DirectionalLight directionalLight = lighting_uDirectionalLight[i];\n      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\n    }\n  }\n  return lightColor;\n}\n\nvec3 lighting_getSpecularLightColor(vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {\n  vec3 lightColor = vec3(0, 0, 0);\n  vec3 surfaceColor = vec3(0, 0, 0);\n\n  if (lighting_uEnabled) {\n    vec3 view_direction = normalize(cameraPosition - position_worldspace);\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting_uPointLightCount) {\n        break;\n      }\n      PointLight pointLight = lighting_uPointLight[i];\n      vec3 light_position_worldspace = pointLight.position;\n      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);\n      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);\n    }\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting_uDirectionalLightCount) {\n        break;\n      }\n      DirectionalLight directionalLight = lighting_uDirectionalLight[i];\n      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\n    }\n  }\n  return lightColor;\n}\n`;\n"},"lineCount":null}},"error":null,"hash":"8b9fdfb4843fabf3709b8a5cd054bc5e","cacheData":{"env":{}}}