{"id":"HCaU","dependencies":[{"name":"/project/deck-gl-examples-01/node_modules/@luma.gl/shadertools/dist/esm/modules/lights/lights.glsl.js.map","includedInParent":true,"mtime":1688284132458},{"name":"/project/deck-gl-examples-01/package.json","includedInParent":true,"mtime":1688495957541},{"name":"/project/deck-gl-examples-01/node_modules/@luma.gl/shadertools/package.json","includedInParent":true,"mtime":1688284132458}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=void 0;var n=\"#if (defined(SHADER_TYPE_FRAGMENT) && defined(LIGHTING_FRAGMENT)) || (defined(SHADER_TYPE_VERTEX) && defined(LIGHTING_VERTEX))\\n\\nstruct AmbientLight {\\n vec3 color;\\n};\\n\\nstruct PointLight {\\n vec3 color;\\n vec3 position;\\n vec3 attenuation;\\n};\\n\\nstruct DirectionalLight {\\n  vec3 color;\\n  vec3 direction;\\n};\\n\\nuniform AmbientLight lighting_uAmbientLight;\\nuniform PointLight lighting_uPointLight[MAX_LIGHTS];\\nuniform DirectionalLight lighting_uDirectionalLight[MAX_LIGHTS];\\nuniform int lighting_uPointLightCount;\\nuniform int lighting_uDirectionalLightCount;\\n\\nuniform bool lighting_uEnabled;\\n\\nfloat getPointLightAttenuation(PointLight pointLight, float distance) {\\n  return pointLight.attenuation.x\\n       + pointLight.attenuation.y * distance\\n       + pointLight.attenuation.z * distance * distance;\\n}\\n\\n#endif\\n\";exports.default=n;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/modules/lights/lights.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../../../src/modules/lights/lights.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":13}},{"source":"../../../../src/modules/lights/lights.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":20}},{"source":"../../../../src/modules/lights/lights.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":35}},{"source":"../../../../src/modules/lights/lights.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":43}},{"source":"../../../../src/modules/lights/lights.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":56}},{"source":"../../../../src/modules/lights/lights.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":57}},{"source":"../../../../src/modules/lights/lights.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":64}},{"source":"../../../../src/modules/lights/lights.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":68}},{"source":"../../../../src/modules/lights/lights.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":76}},{"source":"../../../../src/modules/lights/lights.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":89}},{"source":"../../../../src/modules/lights/lights.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":91}},{"source":"../../../../src/modules/lights/lights.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":95}},{"source":"../../../../src/modules/lights/lights.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":97}},{"source":"../../../../src/modules/lights/lights.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":932}},{"source":"../../../../src/modules/lights/lights.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":940}},{"source":"../../../../src/modules/lights/lights.glsl.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":948}}],"sources":{"../../../../src/modules/lights/lights.glsl.js":"export default `\\\n#if (defined(SHADER_TYPE_FRAGMENT) && defined(LIGHTING_FRAGMENT)) || (defined(SHADER_TYPE_VERTEX) && defined(LIGHTING_VERTEX))\n\nstruct AmbientLight {\n vec3 color;\n};\n\nstruct PointLight {\n vec3 color;\n vec3 position;\n\n // Constant-Linear-Exponential\n vec3 attenuation;\n};\n\nstruct DirectionalLight {\n  vec3 color;\n  vec3 direction;\n};\n\nuniform AmbientLight lighting_uAmbientLight;\nuniform PointLight lighting_uPointLight[MAX_LIGHTS];\nuniform DirectionalLight lighting_uDirectionalLight[MAX_LIGHTS];\nuniform int lighting_uPointLightCount;\nuniform int lighting_uDirectionalLightCount;\n\nuniform bool lighting_uEnabled;\n\nfloat getPointLightAttenuation(PointLight pointLight, float distance) {\n  return pointLight.attenuation.x\n       + pointLight.attenuation.y * distance\n       + pointLight.attenuation.z * distance * distance;\n}\n\n#endif\n`;\n"},"lineCount":null}},"error":null,"hash":"e99200132d59cdb2ddc0fb93382350a6","cacheData":{"env":{}}}