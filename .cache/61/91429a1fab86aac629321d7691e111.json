{"id":"node_modules/@luma.gl/shadertools/dist/esm/modules/transform/transform.js","dependencies":[{"name":"/project/home/cpandit201/workspace/node_modules/@luma.gl/shadertools/dist/esm/modules/transform/transform.js.map","includedInParent":true,"mtime":1688284132458},{"name":"/project/home/cpandit201/workspace/package.json","includedInParent":true,"mtime":1688495957541},{"name":"/project/home/cpandit201/workspace/node_modules/@luma.gl/shadertools/package.json","includedInParent":true,"mtime":1688284132458}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transform = void 0;\nconst vs = \"attribute float transform_elementID;\\nvec2 transform_getPixelSizeHalf(vec2 size) {\\n  return vec2(1.) / (2. * size);\\n}\\n\\nvec2 transform_getPixelIndices(vec2 texSize, vec2 pixelSizeHalf) {\\n  float yIndex = floor((transform_elementID / texSize[0]) + pixelSizeHalf[1]);\\n  float xIndex = transform_elementID - (yIndex * texSize[0]);\\n  return vec2(xIndex, yIndex);\\n}\\nvec2 transform_getTexCoord(vec2 size) {\\n  vec2 pixelSizeHalf = transform_getPixelSizeHalf(size);\\n  vec2 indices = transform_getPixelIndices(size, pixelSizeHalf);\\n  vec2 coord = indices / size + pixelSizeHalf;\\n  return coord;\\n}\\nvec2 transform_getPos(vec2 size) {\\n  vec2 texCoord = transform_getTexCoord(size);\\n  vec2 pos = (texCoord * (2.0, 2.0)) - (1., 1.);\\n  return pos;\\n}\\nvec4 transform_getInput(sampler2D texSampler, vec2 size) {\\n  vec2 texCoord = transform_getTexCoord(size);\\n  vec4 textureColor = texture2D(texSampler, texCoord);\\n  return textureColor;\\n}\\n\";\nconst transform = {\n  name: 'transform',\n  vs,\n  fs: null\n};\nexports.transform = transform;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/modules/transform/transform.js","name":null,"original":{"line":3,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../../src/modules/transform/transform.js","name":"vs","original":{"line":3,"column":6},"generated":{"line":7,"column":6}},{"source":"../../../../src/modules/transform/transform.js","name":null,"original":{"line":3,"column":8},"generated":{"line":7,"column":8}},{"source":"../../../../src/modules/transform/transform.js","name":null,"original":{"line":3,"column":8},"generated":{"line":7,"column":11}},{"source":"../../../../src/modules/transform/transform.js","name":null,"original":{"line":3,"column":0},"generated":{"line":7,"column":958}},{"source":"../../../../src/modules/transform/transform.js","name":null,"original":{"line":45,"column":7},"generated":{"line":8,"column":0}},{"source":"../../../../src/modules/transform/transform.js","name":"transform","original":{"line":45,"column":13},"generated":{"line":8,"column":6}},{"source":"../../../../src/modules/transform/transform.js","name":null,"original":{"line":45,"column":22},"generated":{"line":8,"column":15}},{"source":"../../../../src/modules/transform/transform.js","name":null,"original":{"line":45,"column":25},"generated":{"line":8,"column":18}},{"source":"../../../../src/modules/transform/transform.js","name":"name","original":{"line":46,"column":2},"generated":{"line":9,"column":2}},{"source":"../../../../src/modules/transform/transform.js","name":null,"original":{"line":46,"column":6},"generated":{"line":9,"column":6}},{"source":"../../../../src/modules/transform/transform.js","name":null,"original":{"line":46,"column":8},"generated":{"line":9,"column":8}},{"source":"../../../../src/modules/transform/transform.js","name":null,"original":{"line":45,"column":25},"generated":{"line":9,"column":19}},{"source":"../../../../src/modules/transform/transform.js","name":"vs","original":{"line":47,"column":2},"generated":{"line":10,"column":2}},{"source":"../../../../src/modules/transform/transform.js","name":null,"original":{"line":45,"column":25},"generated":{"line":10,"column":4}},{"source":"../../../../src/modules/transform/transform.js","name":"fs","original":{"line":48,"column":2},"generated":{"line":11,"column":2}},{"source":"../../../../src/modules/transform/transform.js","name":null,"original":{"line":48,"column":4},"generated":{"line":11,"column":4}},{"source":"../../../../src/modules/transform/transform.js","name":null,"original":{"line":48,"column":6},"generated":{"line":11,"column":6}},{"source":"../../../../src/modules/transform/transform.js","name":null,"original":{"line":45,"column":25},"generated":{"line":12,"column":0}},{"source":"../../../../src/modules/transform/transform.js","name":null,"original":{"line":45,"column":7},"generated":{"line":12,"column":1}},{"source":"../../../../src/modules/transform/transform.js","name":null,"original":{"line":45,"column":7},"generated":{"line":13,"column":0}},{"source":"../../../../src/modules/transform/transform.js","name":null,"original":{"line":45,"column":7},"generated":{"line":13,"column":7}},{"source":"../../../../src/modules/transform/transform.js","name":null,"original":{"line":45,"column":7},"generated":{"line":13,"column":8}},{"source":"../../../../src/modules/transform/transform.js","name":null,"original":{"line":45,"column":7},"generated":{"line":13,"column":17}},{"source":"../../../../src/modules/transform/transform.js","name":null,"original":{"line":45,"column":7},"generated":{"line":13,"column":20}},{"source":"../../../../src/modules/transform/transform.js","name":null,"original":{"line":45,"column":7},"generated":{"line":13,"column":29}}],"sources":{"../../../../src/modules/transform/transform.js":"/** @typedef {import('../../types').ShaderModule} ShaderModule */\n\nconst vs = `\\\nattribute float transform_elementID;\n\n// returns half of pixel size, used to move the pixel position to center of the pixel.\nvec2 transform_getPixelSizeHalf(vec2 size) {\n  return vec2(1.) / (2. * size);\n}\n\n// returns current elements pixel indeces [x, y],\n// where x ranges in [0 to texSize-1] and y ranges in [0 to texSize-1]\nvec2 transform_getPixelIndices(vec2 texSize, vec2 pixelSizeHalf) {\n  // Add safe offset (half of pixel height) before doing floor\n  float yIndex = floor((transform_elementID / texSize[0]) + pixelSizeHalf[1]);\n  float xIndex = transform_elementID - (yIndex * texSize[0]);\n  return vec2(xIndex, yIndex);\n}\n\n// returns current elementID's texture co-ordianate\nvec2 transform_getTexCoord(vec2 size) {\n  vec2 pixelSizeHalf = transform_getPixelSizeHalf(size);\n  vec2 indices = transform_getPixelIndices(size, pixelSizeHalf);\n  vec2 coord = indices / size + pixelSizeHalf;\n  return coord;\n}\n\n// returns current elementID's position\nvec2 transform_getPos(vec2 size) {\n  vec2 texCoord = transform_getTexCoord(size);\n  // Change from [0 1] range to [-1 1]\n  vec2 pos = (texCoord * (2.0, 2.0)) - (1., 1.);\n  return pos;\n}\n\n// returns current elementID's pixel value\nvec4 transform_getInput(sampler2D texSampler, vec2 size) {\n  vec2 texCoord = transform_getTexCoord(size);\n  vec4 textureColor = texture2D(texSampler, texCoord);\n  return textureColor;\n}\n`;\n\n/** @type {ShaderModule} */\nexport const transform = {\n  name: 'transform',\n  vs,\n  fs: null\n};\n"},"lineCount":null}},"error":null,"hash":"c03f0e5797899cc39f076b9fdadaf574","cacheData":{"env":{}}}