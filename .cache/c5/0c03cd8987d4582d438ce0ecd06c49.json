{"id":"FUVZ","dependencies":[{"name":"/project/deck-gl-examples-01/node_modules/@loaders.gl/loader-utils/dist/esm/lib/binary-utils/memory-copy-utils.js.map","includedInParent":true,"mtime":1688284132110},{"name":"/project/deck-gl-examples-01/package.json","includedInParent":true,"mtime":1688495957541},{"name":"/project/deck-gl-examples-01/node_modules/@loaders.gl/loader-utils/package.json","includedInParent":true,"mtime":1688284132110},{"name":"../env-utils/assert","loc":{"line":1,"column":23,"index":23},"parent":"/project/deck-gl-examples-01/node_modules/@loaders.gl/loader-utils/dist/esm/lib/binary-utils/memory-copy-utils.js","resolved":"/project/deck-gl-examples-01/node_modules/@loaders.gl/loader-utils/dist/esm/lib/env-utils/assert.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.copyArrayBuffer=t,exports.copyToArray=n,exports.padToNBytes=r;var e=require(\"../env-utils/assert\");function r(r,t){return(0,e.assert)(r>=0),(0,e.assert)(t>0),r+(t-1)&~(t-1)}function t(e,r,t){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:r.byteLength;const s=new Uint8Array(e,t,n),o=new Uint8Array(r);return s.set(o),e}function n(e,t,n){let s;if(e instanceof ArrayBuffer)s=new Uint8Array(e);else{const r=e.byteOffset,t=e.byteLength;s=new Uint8Array(e.buffer||e.arrayBuffer,r,t)}return t.set(s,n),n+r(s.byteLength,4)}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":65,"column":0},"generated":{"line":1,"column":0}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":65,"column":0},"generated":{"line":1,"column":13}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":65,"column":0},"generated":{"line":1,"column":20}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":65,"column":0},"generated":{"line":1,"column":35}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":65,"column":0},"generated":{"line":1,"column":43}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":65,"column":0},"generated":{"line":1,"column":56}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":65,"column":0},"generated":{"line":1,"column":57}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":65,"column":0},"generated":{"line":1,"column":64}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":65,"column":0},"generated":{"line":1,"column":68}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":65,"column":0},"generated":{"line":1,"column":76}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":65,"column":0},"generated":{"line":1,"column":92}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":65,"column":0},"generated":{"line":1,"column":94}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":65,"column":0},"generated":{"line":1,"column":102}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":65,"column":0},"generated":{"line":1,"column":114}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":65,"column":0},"generated":{"line":1,"column":116}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":65,"column":0},"generated":{"line":1,"column":124}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":65,"column":0},"generated":{"line":1,"column":136}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":138}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":142}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":144}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":152}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":10,"column":7},"generated":{"line":1,"column":175}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"padToNBytes","original":{"line":10,"column":16},"generated":{"line":1,"column":184}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"byteLength","original":{"line":10,"column":28},"generated":{"line":1,"column":186}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"padding","original":{"line":10,"column":48},"generated":{"line":1,"column":188}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":13,"column":2},"generated":{"line":1,"column":191}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"assert","original":{"line":11,"column":2},"generated":{"line":1,"column":198}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"assert","original":{"line":11,"column":2},"generated":{"line":1,"column":200}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":11,"column":8},"generated":{"line":1,"column":202}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"byteLength","original":{"line":11,"column":9},"generated":{"line":1,"column":210}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":11,"column":23},"generated":{"line":1,"column":213}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"assert","original":{"line":12,"column":2},"generated":{"line":1,"column":217}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"assert","original":{"line":12,"column":2},"generated":{"line":1,"column":219}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":12,"column":8},"generated":{"line":1,"column":221}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"padding","original":{"line":12,"column":9},"generated":{"line":1,"column":229}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":12,"column":19},"generated":{"line":1,"column":231}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"byteLength","original":{"line":13,"column":10},"generated":{"line":1,"column":234}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"padding","original":{"line":13,"column":24},"generated":{"line":1,"column":237}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":13,"column":34},"generated":{"line":1,"column":239}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"padding","original":{"line":13,"column":42},"generated":{"line":1,"column":244}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":13,"column":52},"generated":{"line":1,"column":246}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":22,"column":7},"generated":{"line":1,"column":249}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"copyArrayBuffer","original":{"line":22,"column":16},"generated":{"line":1,"column":258}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"targetBuffer","original":{"line":23,"column":2},"generated":{"line":1,"column":260}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"sourceBuffer","original":{"line":24,"column":2},"generated":{"line":1,"column":262}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"byteOffset","original":{"line":25,"column":2},"generated":{"line":1,"column":264}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":27,"column":15},"generated":{"line":1,"column":267}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"byteLength","original":{"line":26,"column":2},"generated":{"line":1,"column":271}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"arguments","original":{"line":26,"column":20},"generated":{"line":1,"column":273}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"length","original":{"line":26,"column":20},"generated":{"line":1,"column":283}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":26,"column":20},"generated":{"line":1,"column":290}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"undefined","original":{"line":26,"column":20},"generated":{"line":1,"column":298}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"arguments","original":{"line":26,"column":20},"generated":{"line":1,"column":302}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":26,"column":20},"generated":{"line":1,"column":312}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"arguments","original":{"line":26,"column":20},"generated":{"line":1,"column":315}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":26,"column":20},"generated":{"line":1,"column":325}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"sourceBuffer","original":{"line":26,"column":23},"generated":{"line":1,"column":328}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"byteLength","original":{"line":26,"column":36},"generated":{"line":1,"column":330}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":28,"column":2},"generated":{"line":1,"column":341}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"targetArray","original":{"line":28,"column":8},"generated":{"line":1,"column":347}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":28,"column":22},"generated":{"line":1,"column":349}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"Uint8Array","original":{"line":28,"column":26},"generated":{"line":1,"column":353}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"targetBuffer","original":{"line":28,"column":37},"generated":{"line":1,"column":364}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"byteOffset","original":{"line":28,"column":51},"generated":{"line":1,"column":366}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"byteLength","original":{"line":28,"column":63},"generated":{"line":1,"column":368}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"sourceArray","original":{"line":29,"column":8},"generated":{"line":1,"column":371}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":29,"column":22},"generated":{"line":1,"column":373}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"Uint8Array","original":{"line":29,"column":26},"generated":{"line":1,"column":377}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"sourceBuffer","original":{"line":29,"column":37},"generated":{"line":1,"column":388}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":31,"column":2},"generated":{"line":1,"column":391}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"targetArray","original":{"line":30,"column":2},"generated":{"line":1,"column":398}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"set","original":{"line":30,"column":14},"generated":{"line":1,"column":400}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"sourceArray","original":{"line":30,"column":18},"generated":{"line":1,"column":404}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"targetBuffer","original":{"line":31,"column":9},"generated":{"line":1,"column":407}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":42,"column":7},"generated":{"line":1,"column":409}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"copyToArray","original":{"line":42,"column":16},"generated":{"line":1,"column":418}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"source","original":{"line":42,"column":28},"generated":{"line":1,"column":420}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"target","original":{"line":42,"column":55},"generated":{"line":1,"column":422}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"targetOffset","original":{"line":42,"column":68},"generated":{"line":1,"column":424}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":43,"column":2},"generated":{"line":1,"column":427}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"sourceArray","original":{"line":43,"column":6},"generated":{"line":1,"column":431}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":45,"column":2},"generated":{"line":1,"column":433}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"source","original":{"line":45,"column":6},"generated":{"line":1,"column":436}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"ArrayBuffer","original":{"line":45,"column":24},"generated":{"line":1,"column":449}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"sourceArray","original":{"line":46,"column":4},"generated":{"line":1,"column":461}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":46,"column":18},"generated":{"line":1,"column":463}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"Uint8Array","original":{"line":46,"column":22},"generated":{"line":1,"column":467}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"source","original":{"line":46,"column":33},"generated":{"line":1,"column":478}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":47,"column":9},"generated":{"line":1,"column":485}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":54,"column":4},"generated":{"line":1,"column":486}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"srcByteOffset","original":{"line":54,"column":10},"generated":{"line":1,"column":492}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"source","original":{"line":54,"column":26},"generated":{"line":1,"column":494}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"byteOffset","original":{"line":54,"column":33},"generated":{"line":1,"column":496}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"srcByteLength","original":{"line":55,"column":10},"generated":{"line":1,"column":507}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"source","original":{"line":55,"column":26},"generated":{"line":1,"column":509}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"byteLength","original":{"line":55,"column":33},"generated":{"line":1,"column":511}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"sourceArray","original":{"line":58,"column":4},"generated":{"line":1,"column":522}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":58,"column":18},"generated":{"line":1,"column":524}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"Uint8Array","original":{"line":58,"column":22},"generated":{"line":1,"column":528}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"source","original":{"line":58,"column":33},"generated":{"line":1,"column":539}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"buffer","original":{"line":58,"column":40},"generated":{"line":1,"column":541}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"source","original":{"line":58,"column":50},"generated":{"line":1,"column":549}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"arrayBuffer","original":{"line":58,"column":57},"generated":{"line":1,"column":551}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"srcByteOffset","original":{"line":58,"column":70},"generated":{"line":1,"column":563}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"srcByteLength","original":{"line":58,"column":85},"generated":{"line":1,"column":565}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":64,"column":2},"generated":{"line":1,"column":568}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"target","original":{"line":62,"column":2},"generated":{"line":1,"column":575}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"set","original":{"line":62,"column":9},"generated":{"line":1,"column":577}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"sourceArray","original":{"line":62,"column":13},"generated":{"line":1,"column":581}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"targetOffset","original":{"line":62,"column":26},"generated":{"line":1,"column":583}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"targetOffset","original":{"line":64,"column":9},"generated":{"line":1,"column":586}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"padToNBytes","original":{"line":64,"column":24},"generated":{"line":1,"column":588}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"sourceArray","original":{"line":64,"column":36},"generated":{"line":1,"column":590}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":"byteLength","original":{"line":64,"column":48},"generated":{"line":1,"column":592}},{"source":"../../../../src/lib/binary-utils/memory-copy-utils.ts","name":null,"original":{"line":64,"column":60},"generated":{"line":1,"column":603}}],"sources":{"../../../../src/lib/binary-utils/memory-copy-utils.ts":"import {assert} from '../env-utils/assert';\n\n/**\n * Calculate new size of an arrayBuffer to be aligned to an n-byte boundary\n * This function increases `byteLength` by the minimum delta,\n * allowing the total length to be divided by `padding`\n * @param byteLength\n * @param padding\n */\nexport function padToNBytes(byteLength: number, padding: number): number {\n  assert(byteLength >= 0); // `Incorrect 'byteLength' value: ${byteLength}`\n  assert(padding > 0); // `Incorrect 'padding' value: ${padding}`\n  return (byteLength + (padding - 1)) & ~(padding - 1);\n}\n\n/**\n * Creates a new Uint8Array based on two different ArrayBuffers\n * @param targetBuffer The first buffer.\n * @param sourceBuffer The second buffer.\n * @return The new ArrayBuffer created out of the two.\n */\nexport function copyArrayBuffer(\n  targetBuffer: ArrayBuffer,\n  sourceBuffer: ArrayBuffer,\n  byteOffset: number,\n  byteLength: number = sourceBuffer.byteLength\n): ArrayBuffer {\n  const targetArray = new Uint8Array(targetBuffer, byteOffset, byteLength);\n  const sourceArray = new Uint8Array(sourceBuffer);\n  targetArray.set(sourceArray);\n  return targetBuffer;\n}\n\n/**\n * Copy from source to target at the targetOffset\n *\n * @param source - The data to copy\n * @param target - The destination to copy data into\n * @param targetOffset - The start offset into target to place the copied data\n * @returns the new offset taking into account proper padding\n */\nexport function copyToArray(source: ArrayBuffer | any, target: any, targetOffset: number): number {\n  let sourceArray;\n\n  if (source instanceof ArrayBuffer) {\n    sourceArray = new Uint8Array(source);\n  } else {\n    // Pack buffer onto the big target array\n    //\n    // 'source.data.buffer' could be a view onto a larger buffer.\n    // We MUST use this constructor to ensure the byteOffset and byteLength is\n    // set to correct values from 'source.data' and not the underlying\n    // buffer for target.set() to work properly.\n    const srcByteOffset = source.byteOffset;\n    const srcByteLength = source.byteLength;\n    // In gltf parser it is set as \"arrayBuffer\" instead of \"buffer\"\n    // https://github.com/visgl/loaders.gl/blob/1e3a82a0a65d7b6a67b1e60633453e5edda2960a/modules/gltf/src/lib/parse-gltf.js#L85\n    sourceArray = new Uint8Array(source.buffer || source.arrayBuffer, srcByteOffset, srcByteLength);\n  }\n\n  // Pack buffer onto the big target array\n  target.set(sourceArray, targetOffset);\n\n  return targetOffset + padToNBytes(sourceArray.byteLength, 4);\n}\n"},"lineCount":null}},"error":null,"hash":"8fc0c3d550ee8ce5aa06d2a175822611","cacheData":{"env":{}}}