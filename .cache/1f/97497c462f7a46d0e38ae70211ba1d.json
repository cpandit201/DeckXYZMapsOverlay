{"id":"UAAe","dependencies":[{"name":"/project/deck-gl-examples-01/node_modules/@loaders.gl/images/dist/esm/lib/category-api/parse-isobmff-binary.js.map","includedInParent":true,"mtime":1688284131151},{"name":"/project/deck-gl-examples-01/package.json","includedInParent":true,"mtime":1688495957541},{"name":"/project/deck-gl-examples-01/node_modules/@loaders.gl/images/package.json","includedInParent":true,"mtime":1688284131151}],"generated":{"js":"\"use strict\";function e(e){return i(e,\"ftyp\",4)?0==(96&e[8])?null:t(e):null}function t(e){switch(r(e,8,12).replace(\"\\0\",\" \").trim()){case\"avif\":case\"avis\":return{extension:\"avif\",mimeType:\"image/avif\"};default:return null}}function r(e,t,r){return String.fromCharCode(...e.slice(t,r))}function n(e){return[...e].map(e=>e.charCodeAt(0))}function i(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;const i=n(t);for(let n=0;n<i.length;++n)if(i[n]!==e[n+r])return!1;return!0}Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.decodeMajorBrand=t,exports.getISOBMFFMediaType=e;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":105,"column":0},"generated":{"line":1,"column":0}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":14,"column":7},"generated":{"line":1,"column":13}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"getISOBMFFMediaType","original":{"line":14,"column":16},"generated":{"line":1,"column":22}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"buffer","original":{"line":14,"column":36},"generated":{"line":1,"column":24}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":16,"column":2},"generated":{"line":1,"column":27}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"checkString","original":{"line":16,"column":7},"generated":{"line":1,"column":34}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"buffer","original":{"line":16,"column":19},"generated":{"line":1,"column":36}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":16,"column":27},"generated":{"line":1,"column":38}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":16,"column":35},"generated":{"line":1,"column":45}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":21,"column":29},"generated":{"line":1,"column":48}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":21,"column":19},"generated":{"line":1,"column":52}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"buffer","original":{"line":21,"column":7},"generated":{"line":1,"column":55}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":21,"column":14},"generated":{"line":1,"column":57}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":22,"column":11},"generated":{"line":1,"column":61}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"decodeMajorBrand","original":{"line":26,"column":9},"generated":{"line":1,"column":66}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"buffer","original":{"line":26,"column":26},"generated":{"line":1,"column":68}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":17,"column":11},"generated":{"line":1,"column":71}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":33,"column":7},"generated":{"line":1,"column":76}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"decodeMajorBrand","original":{"line":33,"column":16},"generated":{"line":1,"column":85}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"buffer","original":{"line":33,"column":33},"generated":{"line":1,"column":87}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":36,"column":2},"generated":{"line":1,"column":90}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"getUTF8String","original":{"line":34,"column":21},"generated":{"line":1,"column":97}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"buffer","original":{"line":34,"column":35},"generated":{"line":1,"column":99}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":34,"column":43},"generated":{"line":1,"column":101}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":34,"column":46},"generated":{"line":1,"column":103}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"replace","original":{"line":34,"column":50},"generated":{"line":1,"column":107}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":34,"column":58},"generated":{"line":1,"column":115}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":34,"column":64},"generated":{"line":1,"column":120}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"trim","original":{"line":34,"column":69},"generated":{"line":1,"column":125}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":37,"column":4},"generated":{"line":1,"column":133}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":37,"column":9},"generated":{"line":1,"column":137}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":38,"column":4},"generated":{"line":1,"column":144}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":38,"column":9},"generated":{"line":1,"column":148}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":39,"column":6},"generated":{"line":1,"column":155}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":39,"column":13},"generated":{"line":1,"column":161}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"extension","original":{"line":39,"column":14},"generated":{"line":1,"column":162}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":39,"column":25},"generated":{"line":1,"column":172}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"mimeType","original":{"line":39,"column":33},"generated":{"line":1,"column":179}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":39,"column":43},"generated":{"line":1,"column":188}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":40,"column":4},"generated":{"line":1,"column":202}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":41,"column":6},"generated":{"line":1,"column":210}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":41,"column":13},"generated":{"line":1,"column":217}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":87,"column":0},"generated":{"line":1,"column":223}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"getUTF8String","original":{"line":87,"column":9},"generated":{"line":1,"column":232}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"array","original":{"line":87,"column":23},"generated":{"line":1,"column":234}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"start","original":{"line":87,"column":42},"generated":{"line":1,"column":236}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"end","original":{"line":87,"column":57},"generated":{"line":1,"column":238}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":88,"column":2},"generated":{"line":1,"column":241}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"String","original":{"line":88,"column":9},"generated":{"line":1,"column":248}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"fromCharCode","original":{"line":88,"column":16},"generated":{"line":1,"column":255}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"array","original":{"line":88,"column":32},"generated":{"line":1,"column":271}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"slice","original":{"line":88,"column":38},"generated":{"line":1,"column":273}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"start","original":{"line":88,"column":44},"generated":{"line":1,"column":279}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"end","original":{"line":88,"column":51},"generated":{"line":1,"column":281}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":91,"column":0},"generated":{"line":1,"column":285}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"stringToBytes","original":{"line":91,"column":9},"generated":{"line":1,"column":294}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"string","original":{"line":91,"column":23},"generated":{"line":1,"column":296}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":92,"column":2},"generated":{"line":1,"column":299}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":92,"column":9},"generated":{"line":1,"column":305}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"string","original":{"line":92,"column":13},"generated":{"line":1,"column":309}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"map","original":{"line":92,"column":21},"generated":{"line":1,"column":312}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"character","original":{"line":92,"column":26},"generated":{"line":1,"column":316}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"character","original":{"line":92,"column":40},"generated":{"line":1,"column":319}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"charCodeAt","original":{"line":92,"column":50},"generated":{"line":1,"column":321}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":92,"column":61},"generated":{"line":1,"column":332}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":95,"column":0},"generated":{"line":1,"column":336}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"checkString","original":{"line":95,"column":9},"generated":{"line":1,"column":345}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"buffer","original":{"line":95,"column":21},"generated":{"line":1,"column":347}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"header","original":{"line":95,"column":48},"generated":{"line":1,"column":349}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":95,"column":93},"generated":{"line":1,"column":352}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"offset","original":{"line":95,"column":64},"generated":{"line":1,"column":356}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"arguments","original":{"line":95,"column":78},"generated":{"line":1,"column":358}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"length","original":{"line":95,"column":78},"generated":{"line":1,"column":368}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":95,"column":78},"generated":{"line":1,"column":375}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"undefined","original":{"line":95,"column":78},"generated":{"line":1,"column":383}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"arguments","original":{"line":95,"column":78},"generated":{"line":1,"column":387}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":95,"column":78},"generated":{"line":1,"column":397}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"arguments","original":{"line":95,"column":78},"generated":{"line":1,"column":400}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":95,"column":78},"generated":{"line":1,"column":410}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":95,"column":81},"generated":{"line":1,"column":413}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":96,"column":2},"generated":{"line":1,"column":415}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"headerBytes","original":{"line":96,"column":8},"generated":{"line":1,"column":421}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"stringToBytes","original":{"line":96,"column":22},"generated":{"line":1,"column":423}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"header","original":{"line":96,"column":36},"generated":{"line":1,"column":425}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":98,"column":2},"generated":{"line":1,"column":428}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":98,"column":7},"generated":{"line":1,"column":432}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"i","original":{"line":98,"column":11},"generated":{"line":1,"column":436}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":98,"column":15},"generated":{"line":1,"column":438}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"i","original":{"line":98,"column":18},"generated":{"line":1,"column":440}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"headerBytes","original":{"line":98,"column":22},"generated":{"line":1,"column":442}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"length","original":{"line":98,"column":34},"generated":{"line":1,"column":444}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"i","original":{"line":98,"column":44},"generated":{"line":1,"column":453}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":99,"column":4},"generated":{"line":1,"column":455}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"headerBytes","original":{"line":99,"column":8},"generated":{"line":1,"column":458}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"i","original":{"line":99,"column":20},"generated":{"line":1,"column":460}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"buffer","original":{"line":99,"column":27},"generated":{"line":1,"column":465}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"i","original":{"line":99,"column":34},"generated":{"line":1,"column":467}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":"offset","original":{"line":99,"column":38},"generated":{"line":1,"column":469}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":100,"column":6},"generated":{"line":1,"column":472}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":100,"column":13},"generated":{"line":1,"column":479}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":104,"column":2},"generated":{"line":1,"column":481}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":104,"column":9},"generated":{"line":1,"column":488}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":105,"column":0},"generated":{"line":1,"column":490}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":105,"column":0},"generated":{"line":1,"column":497}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":105,"column":0},"generated":{"line":1,"column":512}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":105,"column":0},"generated":{"line":1,"column":520}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":105,"column":0},"generated":{"line":1,"column":533}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":105,"column":0},"generated":{"line":1,"column":534}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":105,"column":0},"generated":{"line":1,"column":541}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":105,"column":0},"generated":{"line":1,"column":545}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":105,"column":0},"generated":{"line":1,"column":553}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":105,"column":0},"generated":{"line":1,"column":570}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":105,"column":0},"generated":{"line":1,"column":572}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":105,"column":0},"generated":{"line":1,"column":580}},{"source":"../../../../src/lib/category-api/parse-isobmff-binary.ts","name":null,"original":{"line":105,"column":0},"generated":{"line":1,"column":600}}],"sources":{"../../../../src/lib/category-api/parse-isobmff-binary.ts":"// loaders.gl, MIT license\n// code adapted from https://github.com/sindresorhus/file-type under MIT license\n\n/**\n * Box is a container format that can contain a variety of media related files,\n * so we want to return information about which type of file is actually contained inside\n */\nexport type BoxFileType = {extension: string; mimeType: string};\n\n/**\n * Tests if a buffer is in ISO base media file format (ISOBMFF) @see https://en.wikipedia.org/wiki/ISO_base_media_file_format\n * (ISOBMFF is a media container standard based on the Apple QuickTime container format)\n */\nexport function getISOBMFFMediaType(buffer: Uint8Array): BoxFileType | null {\n  // Almost all ISO base media files start with `ftyp` box. (It's not required to be first, but it's recommended to be.)\n  if (!checkString(buffer, 'ftyp', 4)) {\n    return null;\n  }\n\n  // Extra check: test for 8859-1 printable characters (for simplicity, it's a mask which also catches one non-printable character).\n  if ((buffer[8] & 0x60) === 0x00) {\n    return null;\n  }\n\n  // `ftyp` box must contain a brand major identifier, which must consist of ISO 8859-1 printable characters.\n  return decodeMajorBrand(buffer);\n}\n\n/**\n * brands explained @see https://github.com/strukturag/libheif/issues/83\n * code adapted from @see https://github.com/sindresorhus/file-type/blob/main/core.js#L489-L492\n */\nexport function decodeMajorBrand(buffer: Uint8Array): BoxFileType | null {\n  const brandMajor = getUTF8String(buffer, 8, 12).replace('\\0', ' ').trim();\n\n  switch (brandMajor) {\n    case 'avif':\n    case 'avis':\n      return {extension: 'avif', mimeType: 'image/avif'};\n    default:\n      return null;\n  }\n  // We don't need these now, but they are easy to add\n  // case 'mif1':\n  //   return {extension: 'heic', mimeType: 'image/heif'};\n  // case 'msf1':\n  //   return {extension: 'heic', mimeType: 'image/heif-sequence'};\n  // case 'heic':\n  // case 'heix':\n  //   return {extension: 'heic', mimeType: 'image/heic'};\n  // case 'hevc':\n  // case 'hevx':\n  //   return {extension: 'heic', mimeType: 'image/heic-sequence'};\n  // case 'qt':\n  //   return {ext: 'mov', mime: 'video/quicktime'};\n  // case 'M4V':\n  // case 'M4VH':\n  // case 'M4VP':\n  //   return {ext: 'm4v', mime: 'video/x-m4v'};\n  // case 'M4P':\n  //   return {ext: 'm4p', mime: 'video/mp4'};\n  // case 'M4B':\n  //   return {ext: 'm4b', mime: 'audio/mp4'};\n  // case 'M4A':\n  //   return {ext: 'm4a', mime: 'audio/x-m4a'};\n  // case 'F4V':\n  //   return {ext: 'f4v', mime: 'video/mp4'};\n  // case 'F4P':\n  //   return {ext: 'f4p', mime: 'video/mp4'};\n  // case 'F4A':\n  //   return {ext: 'f4a', mime: 'audio/mp4'};\n  // case 'F4B':\n  //   return {ext: 'f4b', mime: 'audio/mp4'};\n  // case 'crx':\n  //   return {ext: 'cr3', mime: 'image/x-canon-cr3'};\n  // default:\n  // if (brandMajor.startsWith('3g')) {\n  //   if (brandMajor.startsWith('3g2')) {\n  //     return {ext: '3g2', mime: 'video/3gpp2'};\n  //   }\n  //   return {ext: '3gp', mime: 'video/3gpp'};\n  // }\n  // return {ext: 'mp4', mime: 'video/mp4'};\n}\n\n/** Interpret a chunk of bytes as a UTF8 string */\nfunction getUTF8String(array: Uint8Array, start: number, end: number): string {\n  return String.fromCharCode(...array.slice(start, end));\n}\n\nfunction stringToBytes(string: string): number[] {\n  return [...string].map((character) => character.charCodeAt(0));\n}\n\nfunction checkString(buffer: ArrayLike<number>, header: string, offset: number = 0): boolean {\n  const headerBytes = stringToBytes(header);\n\n  for (let i = 0; i < headerBytes.length; ++i) {\n    if (headerBytes[i] !== buffer[i + offset]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n"},"lineCount":null}},"error":null,"hash":"dcbf82f2cc38f29161c28ea70401be9b","cacheData":{"env":{}}}