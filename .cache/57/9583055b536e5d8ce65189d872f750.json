{"id":"node_modules/@deck.gl/layers/dist/esm/column-layer/column-layer-fragment.glsl.js","dependencies":[{"name":"/project/deck-gl-examples-01/node_modules/@deck.gl/layers/dist/esm/column-layer/column-layer-fragment.glsl.js.map","includedInParent":true,"mtime":1688129367690},{"name":"/project/deck-gl-examples-01/package.json","includedInParent":true,"mtime":1688129341320},{"name":"/project/deck-gl-examples-01/node_modules/@deck.gl/layers/package.json","includedInParent":true,"mtime":1688129367690}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = \"#version 300 es\\n#define SHADER_NAME column-layer-fragment-shader\\n\\nprecision highp float;\\n\\nuniform vec3 project_uCameraPosition;\\nuniform bool extruded;\\nuniform bool isStroke;\\n\\nout vec4 fragColor;\\n\\nin vec4 vColor;\\n#ifdef FLAT_SHADING\\nin vec4 position_commonspace;\\n#endif\\n\\nvoid main(void) {\\n  fragColor = vColor;\\n#ifdef FLAT_SHADING\\n  if (extruded && !isStroke && !picking_uActive) {\\n    vec3 normal = normalize(cross(dFdx(position_commonspace.xyz), dFdy(position_commonspace.xyz)));\\n    fragColor.rgb = lighting_getLightColor(vColor.rgb, project_uCameraPosition, position_commonspace.xyz, normal);\\n  }\\n#endif\\n  DECKGL_FILTER_COLOR(fragColor, geometry);\\n}\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/column-layer/column-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":7,"column":15}},{"source":"../../../src/column-layer/column-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":7,"column":696}},{"source":"../../../src/column-layer/column-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/column-layer/column-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":8,"column":7}},{"source":"../../../src/column-layer/column-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":8,"column":8}},{"source":"../../../src/column-layer/column-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":8,"column":15}},{"source":"../../../src/column-layer/column-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":8,"column":18}},{"source":"../../../src/column-layer/column-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":8,"column":26}}],"sources":{"../../../src/column-layer/column-layer-fragment.glsl.ts":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `#version 300 es\n#define SHADER_NAME column-layer-fragment-shader\n\nprecision highp float;\n\nuniform vec3 project_uCameraPosition;\nuniform bool extruded;\nuniform bool isStroke;\n\nout vec4 fragColor;\n\nin vec4 vColor;\n#ifdef FLAT_SHADING\nin vec4 position_commonspace;\n#endif\n\nvoid main(void) {\n  fragColor = vColor;\n#ifdef FLAT_SHADING\n  if (extruded && !isStroke && !picking_uActive) {\n    vec3 normal = normalize(cross(dFdx(position_commonspace.xyz), dFdy(position_commonspace.xyz)));\n    fragColor.rgb = lighting_getLightColor(vColor.rgb, project_uCameraPosition, position_commonspace.xyz, normal);\n  }\n#endif\n  DECKGL_FILTER_COLOR(fragColor, geometry);\n}\n`;\n"},"lineCount":null}},"error":null,"hash":"27bd4c39ae6ff069ba6fb43a6ab3f3b4","cacheData":{"env":{}}}