{"id":"P8kQ","dependencies":[{"name":"/project/deck-gl-examples-01/node_modules/@loaders.gl/core/dist/esm/lib/utils/mime-type-utils.js.map","includedInParent":true,"mtime":1688284130527},{"name":"/project/deck-gl-examples-01/package.json","includedInParent":true,"mtime":1688495957541},{"name":"/project/deck-gl-examples-01/node_modules/@loaders.gl/core/package.json","includedInParent":true,"mtime":1688284130527}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.parseMIMEType=r,exports.parseMIMETypeFromURL=o;const e=/^data:([-\\w.]+\\/[-\\w.+]+)(;|,)/,t=/^([-\\w.]+\\/[-\\w.+]+)/;function r(e){const r=t.exec(e);return r?r[1]:e}function o(t){const r=e.exec(t);return r?r[1]:\"\"}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":40,"column":0},"generated":{"line":1,"column":0}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":40,"column":0},"generated":{"line":1,"column":13}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":40,"column":0},"generated":{"line":1,"column":20}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":40,"column":0},"generated":{"line":1,"column":35}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":40,"column":0},"generated":{"line":1,"column":43}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":40,"column":0},"generated":{"line":1,"column":56}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":40,"column":0},"generated":{"line":1,"column":57}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":40,"column":0},"generated":{"line":1,"column":64}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":40,"column":0},"generated":{"line":1,"column":68}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":40,"column":0},"generated":{"line":1,"column":76}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":40,"column":0},"generated":{"line":1,"column":90}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":40,"column":0},"generated":{"line":1,"column":92}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":40,"column":0},"generated":{"line":1,"column":100}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":40,"column":0},"generated":{"line":1,"column":121}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":123}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":"DATA_URL_PATTERN","original":{"line":4,"column":6},"generated":{"line":1,"column":129}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":4,"column":25},"generated":{"line":1,"column":131}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":"MIME_TYPE_PATTERN","original":{"line":5,"column":6},"generated":{"line":1,"column":164}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":5,"column":26},"generated":{"line":1,"column":166}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":15,"column":7},"generated":{"line":1,"column":189}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":"parseMIMEType","original":{"line":15,"column":16},"generated":{"line":1,"column":198}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":"mimeString","original":{"line":15,"column":30},"generated":{"line":1,"column":200}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":17,"column":2},"generated":{"line":1,"column":203}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":"matches","original":{"line":17,"column":8},"generated":{"line":1,"column":209}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":"MIME_TYPE_PATTERN","original":{"line":17,"column":18},"generated":{"line":1,"column":211}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":"exec","original":{"line":17,"column":36},"generated":{"line":1,"column":213}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":"mimeString","original":{"line":17,"column":41},"generated":{"line":1,"column":218}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":18,"column":2},"generated":{"line":1,"column":221}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":"matches","original":{"line":18,"column":6},"generated":{"line":1,"column":228}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":"matches","original":{"line":19,"column":11},"generated":{"line":1,"column":230}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":19,"column":19},"generated":{"line":1,"column":232}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":"mimeString","original":{"line":21,"column":9},"generated":{"line":1,"column":235}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":33,"column":7},"generated":{"line":1,"column":237}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":"parseMIMETypeFromURL","original":{"line":33,"column":16},"generated":{"line":1,"column":246}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":"url","original":{"line":33,"column":37},"generated":{"line":1,"column":248}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":35,"column":2},"generated":{"line":1,"column":251}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":"matches","original":{"line":35,"column":8},"generated":{"line":1,"column":257}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":"DATA_URL_PATTERN","original":{"line":35,"column":18},"generated":{"line":1,"column":259}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":"exec","original":{"line":35,"column":35},"generated":{"line":1,"column":261}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":"url","original":{"line":35,"column":40},"generated":{"line":1,"column":266}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":36,"column":2},"generated":{"line":1,"column":269}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":"matches","original":{"line":36,"column":6},"generated":{"line":1,"column":276}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":"matches","original":{"line":37,"column":11},"generated":{"line":1,"column":278}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":37,"column":19},"generated":{"line":1,"column":280}},{"source":"../../../../src/lib/utils/mime-type-utils.ts","name":null,"original":{"line":39,"column":9},"generated":{"line":1,"column":283}}],"sources":{"../../../../src/lib/utils/mime-type-utils.ts":"// TODO - build/integrate proper MIME type parsing\n// https://mimesniff.spec.whatwg.org/\n\nconst DATA_URL_PATTERN = /^data:([-\\w.]+\\/[-\\w.+]+)(;|,)/;\nconst MIME_TYPE_PATTERN = /^([-\\w.]+\\/[-\\w.+]+)/;\n\n/**\n * Remove extra data like `charset` from MIME types\n * @param mimeString\n * @returns A clean MIME type, or an empty string\n *\n * @todo - handle more advanced MIMETYpes, multiple types\n * @todo - extract charset etc\n */\nexport function parseMIMEType(mimeString: string): string {\n  // If resource is a data url, extract any embedded mime type\n  const matches = MIME_TYPE_PATTERN.exec(mimeString);\n  if (matches) {\n    return matches[1];\n  }\n  return mimeString;\n}\n\n/**\n * Extract MIME type from data URL\n *\n * @param mimeString\n * @returns A clean MIME type, or an empty string\n *\n * @todo - handle more advanced MIMETYpes, multiple types\n * @todo - extract charset etc\n */\nexport function parseMIMETypeFromURL(url: string): string {\n  // If resource is a data URL, extract any embedded mime type\n  const matches = DATA_URL_PATTERN.exec(url);\n  if (matches) {\n    return matches[1];\n  }\n  return '';\n}\n"},"lineCount":null}},"error":null,"hash":"a5dc2a80d053e753dbf06b8d38f47177","cacheData":{"env":{}}}