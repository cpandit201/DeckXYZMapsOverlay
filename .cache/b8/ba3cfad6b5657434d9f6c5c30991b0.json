{"id":"bSNg","dependencies":[{"name":"/project/deck-gl-examples-01/node_modules/@deck.gl/layers/dist/esm/icon-layer/icon-layer-fragment.glsl.js.map","includedInParent":true,"mtime":1688284132821},{"name":"/project/deck-gl-examples-01/package.json","includedInParent":true,"mtime":1688495957541},{"name":"/project/deck-gl-examples-01/node_modules/@deck.gl/layers/package.json","includedInParent":true,"mtime":1688284132821}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=void 0;var o=\"#define SHADER_NAME icon-layer-fragment-shader\\n\\nprecision highp float;\\n\\nuniform float opacity;\\nuniform sampler2D iconsTexture;\\nuniform float alphaCutoff;\\n\\nvarying float vColorMode;\\nvarying vec4 vColor;\\nvarying vec2 vTextureCoords;\\nvarying vec2 uv;\\n\\nvoid main(void) {\\n  geometry.uv = uv;\\n\\n  vec4 texColor = texture2D(iconsTexture, vTextureCoords);\\n  vec3 color = mix(texColor.rgb, vColor.rgb, vColorMode);\\n  float a = texColor.a * opacity * vColor.a;\\n\\n  if (a < alphaCutoff) {\\n    discard;\\n  }\\n\\n  gl_FragColor = vec4(color, a);\\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\\n}\\n\";exports.default=o;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/icon-layer/icon-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":0}},{"source":"../../../src/icon-layer/icon-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":13}},{"source":"../../../src/icon-layer/icon-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":20}},{"source":"../../../src/icon-layer/icon-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":35}},{"source":"../../../src/icon-layer/icon-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":43}},{"source":"../../../src/icon-layer/icon-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":56}},{"source":"../../../src/icon-layer/icon-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":57}},{"source":"../../../src/icon-layer/icon-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":64}},{"source":"../../../src/icon-layer/icon-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":68}},{"source":"../../../src/icon-layer/icon-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":76}},{"source":"../../../src/icon-layer/icon-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":89}},{"source":"../../../src/icon-layer/icon-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":91}},{"source":"../../../src/icon-layer/icon-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":95}},{"source":"../../../src/icon-layer/icon-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":97}},{"source":"../../../src/icon-layer/icon-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":703}},{"source":"../../../src/icon-layer/icon-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":711}},{"source":"../../../src/icon-layer/icon-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":719}}],"sources":{"../../../src/icon-layer/icon-layer-fragment.glsl.ts":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME icon-layer-fragment-shader\n\nprecision highp float;\n\nuniform float opacity;\nuniform sampler2D iconsTexture;\nuniform float alphaCutoff;\n\nvarying float vColorMode;\nvarying vec4 vColor;\nvarying vec2 vTextureCoords;\nvarying vec2 uv;\n\nvoid main(void) {\n  geometry.uv = uv;\n\n  vec4 texColor = texture2D(iconsTexture, vTextureCoords);\n\n  // if colorMode == 0, use pixel color from the texture\n  // if colorMode == 1 or rendering picking buffer, use texture as transparency mask\n  vec3 color = mix(texColor.rgb, vColor.rgb, vColorMode);\n  // Take the global opacity and the alpha from vColor into account for the alpha component\n  float a = texColor.a * opacity * vColor.a;\n\n  if (a < alphaCutoff) {\n    discard;\n  }\n\n  gl_FragColor = vec4(color, a);\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n"},"lineCount":null}},"error":null,"hash":"91ab777ed79f2d043e4351466dc47cd1","cacheData":{"env":{}}}