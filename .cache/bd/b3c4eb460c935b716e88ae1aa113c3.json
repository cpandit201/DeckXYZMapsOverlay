{"id":"node_modules/@deck.gl/layers/dist/esm/text-layer/text-background-layer/text-background-layer-fragment.glsl.js","dependencies":[{"name":"/project/deck-gl-examples-01/node_modules/@deck.gl/layers/dist/esm/text-layer/text-background-layer/text-background-layer-fragment.glsl.js.map","includedInParent":true,"mtime":1688318182663},{"name":"/project/deck-gl-examples-01/package.json","includedInParent":true,"mtime":1688315348114},{"name":"/project/deck-gl-examples-01/node_modules/@deck.gl/layers/package.json","includedInParent":true,"mtime":1688318182663}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = \"#define SHADER_NAME text-background-layer-fragment-shader\\n\\nprecision highp float;\\n\\nuniform bool stroked;\\n\\nvarying vec4 vFillColor;\\nvarying vec4 vLineColor;\\nvarying float vLineWidth;\\nvarying vec2 uv;\\nvarying vec2 dimensions;\\n\\nvoid main(void) {\\n  geometry.uv = uv;\\n\\n  vec2 pixelPosition = uv * dimensions;\\n  if (stroked) {\\n    float distToEdge = min(\\n      min(pixelPosition.x, dimensions.x - pixelPosition.x),\\n      min(pixelPosition.y, dimensions.y - pixelPosition.y)\\n    );\\n    float isBorder = smoothedge(distToEdge, vLineWidth);\\n    gl_FragColor = mix(vFillColor, vLineColor, isBorder);\\n  } else {\\n    gl_FragColor = vFillColor;\\n  }\\n\\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\\n}\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/text-layer/text-background-layer/text-background-layer-fragment.glsl.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":15}},{"source":"../../../../src/text-layer/text-background-layer/text-background-layer-fragment.glsl.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":732}},{"source":"../../../../src/text-layer/text-background-layer/text-background-layer-fragment.glsl.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../src/text-layer/text-background-layer/text-background-layer-fragment.glsl.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":7}},{"source":"../../../../src/text-layer/text-background-layer/text-background-layer-fragment.glsl.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":8}},{"source":"../../../../src/text-layer/text-background-layer/text-background-layer-fragment.glsl.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":15}},{"source":"../../../../src/text-layer/text-background-layer/text-background-layer-fragment.glsl.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":18}},{"source":"../../../../src/text-layer/text-background-layer/text-background-layer-fragment.glsl.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":26}}],"sources":{"../../../../src/text-layer/text-background-layer/text-background-layer-fragment.glsl.ts":"export default `\\\n#define SHADER_NAME text-background-layer-fragment-shader\n\nprecision highp float;\n\nuniform bool stroked;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying float vLineWidth;\nvarying vec2 uv;\nvarying vec2 dimensions;\n\nvoid main(void) {\n  geometry.uv = uv;\n\n  vec2 pixelPosition = uv * dimensions;\n  if (stroked) {\n    float distToEdge = min(\n      min(pixelPosition.x, dimensions.x - pixelPosition.x),\n      min(pixelPosition.y, dimensions.y - pixelPosition.y)\n    );\n    float isBorder = smoothedge(distToEdge, vLineWidth);\n    gl_FragColor = mix(vFillColor, vLineColor, isBorder);\n  } else {\n    gl_FragColor = vFillColor;\n  }\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n"},"lineCount":null}},"error":null,"hash":"dd7405a3b55ee3e098368b0742af227a","cacheData":{"env":{}}}