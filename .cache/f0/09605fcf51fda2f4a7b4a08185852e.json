{"id":"node_modules/@deck.gl/layers/dist/esm/scatterplot-layer/scatterplot-layer-fragment.glsl.js","dependencies":[{"name":"/project/deck-gl-examples-01/node_modules/@deck.gl/layers/dist/esm/scatterplot-layer/scatterplot-layer-fragment.glsl.js.map","includedInParent":true,"mtime":1688284132821},{"name":"/project/deck-gl-examples-01/package.json","includedInParent":true,"mtime":1688495957541},{"name":"/project/deck-gl-examples-01/node_modules/@deck.gl/layers/package.json","includedInParent":true,"mtime":1688284132821}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = \"#define SHADER_NAME scatterplot-layer-fragment-shader\\n\\nprecision highp float;\\n\\nuniform bool filled;\\nuniform float stroked;\\nuniform bool antialiasing;\\n\\nvarying vec4 vFillColor;\\nvarying vec4 vLineColor;\\nvarying vec2 unitPosition;\\nvarying float innerUnitRadius;\\nvarying float outerRadiusPixels;\\n\\nvoid main(void) {\\n  geometry.uv = unitPosition;\\n\\n  float distToCenter = length(unitPosition) * outerRadiusPixels;\\n  float inCircle = antialiasing ? \\n    smoothedge(distToCenter, outerRadiusPixels) : \\n    step(distToCenter, outerRadiusPixels);\\n\\n  if (inCircle == 0.0) {\\n    discard;\\n  }\\n\\n  if (stroked > 0.5) {\\n    float isLine = antialiasing ? \\n      smoothedge(innerUnitRadius * outerRadiusPixels, distToCenter) :\\n      step(innerUnitRadius * outerRadiusPixels, distToCenter);\\n\\n    if (filled) {\\n      gl_FragColor = mix(vFillColor, vLineColor, isLine);\\n    } else {\\n      if (isLine == 0.0) {\\n        discard;\\n      }\\n      gl_FragColor = vec4(vLineColor.rgb, vLineColor.a * isLine);\\n    }\\n  } else if (filled) {\\n    gl_FragColor = vFillColor;\\n  } else {\\n    discard;\\n  }\\n\\n  gl_FragColor.a *= inCircle;\\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\\n}\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/scatterplot-layer/scatterplot-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":7,"column":15}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":7,"column":1212}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":8,"column":7}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":8,"column":8}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":8,"column":15}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":8,"column":18}},{"source":"../../../src/scatterplot-layer/scatterplot-layer-fragment.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":8,"column":26}}],"sources":{"../../../src/scatterplot-layer/scatterplot-layer-fragment.glsl.ts":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME scatterplot-layer-fragment-shader\n\nprecision highp float;\n\nuniform bool filled;\nuniform float stroked;\nuniform bool antialiasing;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying vec2 unitPosition;\nvarying float innerUnitRadius;\nvarying float outerRadiusPixels;\n\nvoid main(void) {\n  geometry.uv = unitPosition;\n\n  float distToCenter = length(unitPosition) * outerRadiusPixels;\n  float inCircle = antialiasing ? \n    smoothedge(distToCenter, outerRadiusPixels) : \n    step(distToCenter, outerRadiusPixels);\n\n  if (inCircle == 0.0) {\n    discard;\n  }\n\n  if (stroked > 0.5) {\n    float isLine = antialiasing ? \n      smoothedge(innerUnitRadius * outerRadiusPixels, distToCenter) :\n      step(innerUnitRadius * outerRadiusPixels, distToCenter);\n\n    if (filled) {\n      gl_FragColor = mix(vFillColor, vLineColor, isLine);\n    } else {\n      if (isLine == 0.0) {\n        discard;\n      }\n      gl_FragColor = vec4(vLineColor.rgb, vLineColor.a * isLine);\n    }\n  } else if (filled) {\n    gl_FragColor = vFillColor;\n  } else {\n    discard;\n  }\n\n  gl_FragColor.a *= inCircle;\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n"},"lineCount":null}},"error":null,"hash":"3e510d8a2bcabf81e20d39a0da21843e","cacheData":{"env":{}}}