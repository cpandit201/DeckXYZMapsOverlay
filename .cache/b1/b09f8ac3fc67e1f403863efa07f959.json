{"id":"node_modules/@deck.gl/core/dist/esm/shaderlib/project/project.glsl.js","dependencies":[{"name":"/project/deck-gl-examples-01/node_modules/@deck.gl/core/dist/esm/shaderlib/project/project.glsl.js.map","includedInParent":true,"mtime":1688129365942},{"name":"/project/deck-gl-examples-01/package.json","includedInParent":true,"mtime":1688129341320},{"name":"/project/deck-gl-examples-01/node_modules/@deck.gl/core/package.json","includedInParent":true,"mtime":1688129365942},{"name":"../../lib/constants","loc":{"line":1,"column":57,"index":57},"parent":"/project/deck-gl-examples-01/node_modules/@deck.gl/core/dist/esm/shaderlib/project/project.glsl.js","resolved":"/project/deck-gl-examples-01/node_modules/@deck.gl/core/dist/esm/lib/constants.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _constants = require(\"../../lib/constants\");\nconst COORDINATE_SYSTEM_GLSL_CONSTANTS = Object.keys(_constants.COORDINATE_SYSTEM).map(key => \"const int COORDINATE_SYSTEM_\".concat(key, \" = \").concat(_constants.COORDINATE_SYSTEM[key], \";\")).join('');\nconst PROJECTION_MODE_GLSL_CONSTANTS = Object.keys(_constants.PROJECTION_MODE).map(key => \"const int PROJECTION_MODE_\".concat(key, \" = \").concat(_constants.PROJECTION_MODE[key], \";\")).join('');\nconst UNIT_GLSL_CONSTANTS = Object.keys(_constants.UNIT).map(key => \"const int UNIT_\".concat(key.toUpperCase(), \" = \").concat(_constants.UNIT[key], \";\")).join('');\nvar _default = \"\".concat(COORDINATE_SYSTEM_GLSL_CONSTANTS, \"\\n\").concat(PROJECTION_MODE_GLSL_CONSTANTS, \"\\n\").concat(UNIT_GLSL_CONSTANTS, \"\\n\\nuniform int project_uCoordinateSystem;\\nuniform int project_uProjectionMode;\\nuniform float project_uScale;\\nuniform bool project_uWrapLongitude;\\nuniform vec3 project_uCommonUnitsPerMeter;\\nuniform vec3 project_uCommonUnitsPerWorldUnit;\\nuniform vec3 project_uCommonUnitsPerWorldUnit2;\\nuniform vec4 project_uCenter;\\nuniform mat4 project_uModelMatrix;\\nuniform mat4 project_uViewProjectionMatrix;\\nuniform vec2 project_uViewportSize;\\nuniform float project_uDevicePixelRatio;\\nuniform float project_uFocalDistance;\\nuniform vec3 project_uCameraPosition;\\nuniform vec3 project_uCoordinateOrigin;\\nuniform vec3 project_uCommonOrigin;\\nuniform bool project_uPseudoMeters;\\n\\nconst float TILE_SIZE = 512.0;\\nconst float PI = 3.1415926536;\\nconst float WORLD_SCALE = TILE_SIZE / (PI * 2.0);\\nconst vec3 ZERO_64_LOW = vec3(0.0);\\nconst float EARTH_RADIUS = 6370972.0;\\nconst float GLOBE_RADIUS = 256.0;\\nfloat project_size_at_latitude(float lat) {\\n  float y = clamp(lat, -89.9, 89.9);\\n  return 1.0 / cos(radians(y));\\n}\\n\\nfloat project_size() {\\n  if (project_uProjectionMode == PROJECTION_MODE_WEB_MERCATOR &&\\n    project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT &&\\n    project_uPseudoMeters == false) {\\n    \\n    if (geometry.position.w == 0.0) {\\n      return project_size_at_latitude(geometry.worldPosition.y);\\n    }\\n  \\n    float y = geometry.position.y / TILE_SIZE * 2.0 - 1.0;\\n    float y2 = y * y;\\n    float y4 = y2 * y2;\\n    float y6 = y4 * y2;\\n    return 1.0 + 4.9348 * y2 + 4.0587 * y4 + 1.5642 * y6;\\n  }\\n  return 1.0;\\n}\\n\\nfloat project_size_at_latitude(float meters, float lat) {\\n  return meters * project_uCommonUnitsPerMeter.z * project_size_at_latitude(lat);\\n}\\nfloat project_size(float meters) {\\n  return meters * project_uCommonUnitsPerMeter.z * project_size();\\n}\\n\\nvec2 project_size(vec2 meters) {\\n  return meters * project_uCommonUnitsPerMeter.xy * project_size();\\n}\\n\\nvec3 project_size(vec3 meters) {\\n  return meters * project_uCommonUnitsPerMeter * project_size();\\n}\\n\\nvec4 project_size(vec4 meters) {\\n  return vec4(meters.xyz * project_uCommonUnitsPerMeter, meters.w);\\n}\\nmat3 project_get_orientation_matrix(vec3 up) {\\n  vec3 uz = normalize(up);\\n  vec3 ux = abs(uz.z) == 1.0 ? vec3(1.0, 0.0, 0.0) : normalize(vec3(uz.y, -uz.x, 0));\\n  vec3 uy = cross(uz, ux);\\n  return mat3(ux, uy, uz);\\n}\\n\\nbool project_needs_rotation(vec3 commonPosition, out mat3 transform) {\\n  if (project_uProjectionMode == PROJECTION_MODE_GLOBE) {\\n    transform = project_get_orientation_matrix(commonPosition);\\n    return true;\\n  }\\n  return false;\\n}\\nvec3 project_normal(vec3 vector) {\\n  vec4 normal_modelspace = project_uModelMatrix * vec4(vector, 0.0);\\n  vec3 n = normalize(normal_modelspace.xyz * project_uCommonUnitsPerMeter);\\n  mat3 rotation;\\n  if (project_needs_rotation(geometry.position.xyz, rotation)) {\\n    n = rotation * n;\\n  }\\n  return n;\\n}\\n\\nvec4 project_offset_(vec4 offset) {\\n  float dy = offset.y;\\n  vec3 commonUnitsPerWorldUnit = project_uCommonUnitsPerWorldUnit + project_uCommonUnitsPerWorldUnit2 * dy;\\n  return vec4(offset.xyz * commonUnitsPerWorldUnit, offset.w);\\n}\\nvec2 project_mercator_(vec2 lnglat) {\\n  float x = lnglat.x;\\n  if (project_uWrapLongitude) {\\n    x = mod(x + 180., 360.0) - 180.;\\n  }\\n  float y = clamp(lnglat.y, -89.9, 89.9);\\n  return vec2(\\n    radians(x) + PI,\\n    PI + log(tan_fp32(PI * 0.25 + radians(y) * 0.5))\\n  ) * WORLD_SCALE;\\n}\\n\\nvec3 project_globe_(vec3 lnglatz) {\\n  float lambda = radians(lnglatz.x);\\n  float phi = radians(lnglatz.y);\\n  float cosPhi = cos(phi);\\n  float D = (lnglatz.z / EARTH_RADIUS + 1.0) * GLOBE_RADIUS;\\n\\n  return vec3(\\n    sin(lambda) * cosPhi,\\n    -cos(lambda) * cosPhi,\\n    sin(phi)\\n  ) * D;\\n}\\nvec4 project_position(vec4 position, vec3 position64Low) {\\n  vec4 position_world = project_uModelMatrix * position;\\n  if (project_uProjectionMode == PROJECTION_MODE_WEB_MERCATOR) {\\n    if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT) {\\n      return vec4(\\n        project_mercator_(position_world.xy),\\n        project_size_at_latitude(position_world.z, position_world.y),\\n        position_world.w\\n      );\\n    }\\n    if (project_uCoordinateSystem == COORDINATE_SYSTEM_CARTESIAN) {\\n      position_world.xyz += project_uCoordinateOrigin;\\n    }\\n  }\\n  if (project_uProjectionMode == PROJECTION_MODE_GLOBE) {\\n    if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT) {\\n      return vec4(\\n        project_globe_(position_world.xyz),\\n        position_world.w\\n      );\\n    }\\n  }\\n  if (project_uProjectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET) {\\n    if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT) {\\n      if (abs(position_world.y - project_uCoordinateOrigin.y) > 0.25) {\\n        return vec4(\\n          project_mercator_(position_world.xy) - project_uCommonOrigin.xy,\\n          project_size(position_world.z),\\n          position_world.w\\n        );\\n      }\\n    }\\n  }\\n  if (project_uProjectionMode == PROJECTION_MODE_IDENTITY ||\\n    (project_uProjectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET &&\\n    (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT ||\\n     project_uCoordinateSystem == COORDINATE_SYSTEM_CARTESIAN))) {\\n    position_world.xyz -= project_uCoordinateOrigin;\\n  }\\n  return project_offset_(position_world + project_uModelMatrix * vec4(position64Low, 0.0));\\n}\\n\\nvec4 project_position(vec4 position) {\\n  return project_position(position, ZERO_64_LOW);\\n}\\n\\nvec3 project_position(vec3 position, vec3 position64Low) {\\n  vec4 projected_position = project_position(vec4(position, 1.0), position64Low);\\n  return projected_position.xyz;\\n}\\n\\nvec3 project_position(vec3 position) {\\n  vec4 projected_position = project_position(vec4(position, 1.0), ZERO_64_LOW);\\n  return projected_position.xyz;\\n}\\n\\nvec2 project_position(vec2 position) {\\n  vec4 projected_position = project_position(vec4(position, 0.0, 1.0), ZERO_64_LOW);\\n  return projected_position.xy;\\n}\\n\\nvec4 project_common_position_to_clipspace(vec4 position, mat4 viewProjectionMatrix, vec4 center) {\\n  return viewProjectionMatrix * position + center;\\n}\\nvec4 project_common_position_to_clipspace(vec4 position) {\\n  return project_common_position_to_clipspace(position, project_uViewProjectionMatrix, project_uCenter);\\n}\\nvec2 project_pixel_size_to_clipspace(vec2 pixels) {\\n  vec2 offset = pixels / project_uViewportSize * project_uDevicePixelRatio * 2.0;\\n  return offset * project_uFocalDistance;\\n}\\n\\nfloat project_size_to_pixel(float meters) {\\n  return project_size(meters) * project_uScale;\\n}\\nfloat project_size_to_pixel(float size, int unit) {\\n  if (unit == UNIT_METERS) return project_size_to_pixel(size);\\n  if (unit == UNIT_COMMON) return size * project_uScale;\\n  return size;\\n}\\nfloat project_pixel_size(float pixels) {\\n  return pixels / project_uScale;\\n}\\nvec2 project_pixel_size(vec2 pixels) {\\n  return pixels / project_uScale;\\n}\\n\");\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":7,"column":4}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":7,"column":14}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":7,"column":17}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":7,"column":24}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"COORDINATE_SYSTEM_GLSL_CONSTANTS","original":{"line":24,"column":6},"generated":{"line":8,"column":6}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":24,"column":38},"generated":{"line":8,"column":38}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"Object","original":{"line":24,"column":41},"generated":{"line":8,"column":41}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":24,"column":47},"generated":{"line":8,"column":47}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"keys","original":{"line":24,"column":48},"generated":{"line":8,"column":48}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":24,"column":41},"generated":{"line":8,"column":52}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"COORDINATE_SYSTEM","original":{"line":24,"column":53},"generated":{"line":8,"column":53}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":24,"column":41},"generated":{"line":8,"column":81}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":24,"column":41},"generated":{"line":8,"column":82}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"map","original":{"line":25,"column":3},"generated":{"line":8,"column":83}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":24,"column":41},"generated":{"line":8,"column":86}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"key","original":{"line":25,"column":7},"generated":{"line":8,"column":87}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":25,"column":10},"generated":{"line":8,"column":90}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":25,"column":10},"generated":{"line":8,"column":94}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":25,"column":10},"generated":{"line":8,"column":124}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":25,"column":10},"generated":{"line":8,"column":125}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":25,"column":10},"generated":{"line":8,"column":131}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"key","original":{"line":25,"column":45},"generated":{"line":8,"column":132}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":25,"column":10},"generated":{"line":8,"column":135}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":25,"column":10},"generated":{"line":8,"column":137}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":25,"column":10},"generated":{"line":8,"column":142}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":25,"column":10},"generated":{"line":8,"column":143}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":25,"column":10},"generated":{"line":8,"column":144}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":25,"column":10},"generated":{"line":8,"column":150}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"COORDINATE_SYSTEM","original":{"line":25,"column":54},"generated":{"line":8,"column":151}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":25,"column":71},"generated":{"line":8,"column":179}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"key","original":{"line":25,"column":72},"generated":{"line":8,"column":180}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":25,"column":71},"generated":{"line":8,"column":183}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":25,"column":10},"generated":{"line":8,"column":184}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":25,"column":10},"generated":{"line":8,"column":186}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":25,"column":10},"generated":{"line":8,"column":189}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":24,"column":41},"generated":{"line":8,"column":190}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":24,"column":41},"generated":{"line":8,"column":191}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"join","original":{"line":26,"column":3},"generated":{"line":8,"column":192}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":24,"column":41},"generated":{"line":8,"column":196}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":26,"column":8},"generated":{"line":8,"column":197}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":24,"column":41},"generated":{"line":8,"column":199}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":8,"column":200}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"PROJECTION_MODE_GLSL_CONSTANTS","original":{"line":27,"column":6},"generated":{"line":9,"column":6}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":27,"column":36},"generated":{"line":9,"column":36}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"Object","original":{"line":27,"column":39},"generated":{"line":9,"column":39}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":27,"column":45},"generated":{"line":9,"column":45}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"keys","original":{"line":27,"column":46},"generated":{"line":9,"column":46}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":27,"column":39},"generated":{"line":9,"column":50}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"PROJECTION_MODE","original":{"line":27,"column":51},"generated":{"line":9,"column":51}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":27,"column":39},"generated":{"line":9,"column":77}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":27,"column":39},"generated":{"line":9,"column":78}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"map","original":{"line":28,"column":3},"generated":{"line":9,"column":79}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":27,"column":39},"generated":{"line":9,"column":82}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"key","original":{"line":28,"column":7},"generated":{"line":9,"column":83}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":9,"column":86}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":9,"column":90}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":9,"column":118}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":9,"column":119}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":9,"column":125}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"key","original":{"line":28,"column":43},"generated":{"line":9,"column":126}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":9,"column":129}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":9,"column":131}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":9,"column":136}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":9,"column":137}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":9,"column":138}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":9,"column":144}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"PROJECTION_MODE","original":{"line":28,"column":52},"generated":{"line":9,"column":145}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":28,"column":67},"generated":{"line":9,"column":171}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"key","original":{"line":28,"column":68},"generated":{"line":9,"column":172}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":28,"column":67},"generated":{"line":9,"column":175}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":9,"column":176}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":9,"column":178}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":9,"column":181}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":27,"column":39},"generated":{"line":9,"column":182}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":27,"column":39},"generated":{"line":9,"column":183}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"join","original":{"line":29,"column":3},"generated":{"line":9,"column":184}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":27,"column":39},"generated":{"line":9,"column":188}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":29,"column":8},"generated":{"line":9,"column":189}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":27,"column":39},"generated":{"line":9,"column":191}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":9,"column":192}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":30,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"UNIT_GLSL_CONSTANTS","original":{"line":30,"column":6},"generated":{"line":10,"column":6}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":30,"column":25},"generated":{"line":10,"column":25}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"Object","original":{"line":30,"column":28},"generated":{"line":10,"column":28}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":30,"column":34},"generated":{"line":10,"column":34}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"keys","original":{"line":30,"column":35},"generated":{"line":10,"column":35}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":30,"column":28},"generated":{"line":10,"column":39}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"UNIT","original":{"line":30,"column":40},"generated":{"line":10,"column":40}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":30,"column":28},"generated":{"line":10,"column":55}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":30,"column":28},"generated":{"line":10,"column":56}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"map","original":{"line":31,"column":3},"generated":{"line":10,"column":57}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":30,"column":28},"generated":{"line":10,"column":60}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"key","original":{"line":31,"column":7},"generated":{"line":10,"column":61}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":10,"column":64}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":10,"column":68}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":10,"column":85}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":10,"column":86}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":10,"column":92}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"key","original":{"line":31,"column":32},"generated":{"line":10,"column":93}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":31,"column":35},"generated":{"line":10,"column":96}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"toUpperCase","original":{"line":31,"column":36},"generated":{"line":10,"column":97}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":31,"column":32},"generated":{"line":10,"column":108}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":31,"column":32},"generated":{"line":10,"column":109}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":10,"column":110}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":10,"column":112}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":10,"column":117}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":10,"column":118}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":10,"column":119}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":10,"column":125}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"UNIT","original":{"line":31,"column":55},"generated":{"line":10,"column":126}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":31,"column":59},"generated":{"line":10,"column":141}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"key","original":{"line":31,"column":60},"generated":{"line":10,"column":142}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":31,"column":59},"generated":{"line":10,"column":145}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":10,"column":146}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":10,"column":148}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":10,"column":151}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":30,"column":28},"generated":{"line":10,"column":152}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":30,"column":28},"generated":{"line":10,"column":153}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"join","original":{"line":32,"column":3},"generated":{"line":10,"column":154}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":30,"column":28},"generated":{"line":10,"column":158}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":32,"column":8},"generated":{"line":10,"column":159}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":30,"column":28},"generated":{"line":10,"column":161}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":30,"column":0},"generated":{"line":10,"column":162}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":30,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":30,"column":0},"generated":{"line":11,"column":4}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":30,"column":0},"generated":{"line":11,"column":12}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":11,"column":15}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":11,"column":17}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":11,"column":18}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":11,"column":24}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"COORDINATE_SYSTEM_GLSL_CONSTANTS","original":{"line":35,"column":2},"generated":{"line":11,"column":25}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":11,"column":57}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":11,"column":59}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":11,"column":63}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":11,"column":64}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":11,"column":65}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":11,"column":71}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"PROJECTION_MODE_GLSL_CONSTANTS","original":{"line":36,"column":2},"generated":{"line":11,"column":72}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":11,"column":102}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":11,"column":104}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":11,"column":108}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":11,"column":109}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":11,"column":110}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":11,"column":116}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":"UNIT_GLSL_CONSTANTS","original":{"line":37,"column":2},"generated":{"line":11,"column":117}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":11,"column":136}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":11,"column":138}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":11,"column":7090}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":11,"column":7091}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":12,"column":7}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":12,"column":8}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":12,"column":15}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":12,"column":18}},{"source":"../../../../src/shaderlib/project/project.glsl.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":12,"column":26}}],"sources":{"../../../../src/shaderlib/project/project.glsl.ts":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {COORDINATE_SYSTEM, PROJECTION_MODE, UNIT} from '../../lib/constants';\n\n// We are generating these from the js code in constants.js\nconst COORDINATE_SYSTEM_GLSL_CONSTANTS = Object.keys(COORDINATE_SYSTEM)\n  .map(key => `const int COORDINATE_SYSTEM_${key} = ${COORDINATE_SYSTEM[key]};`)\n  .join('');\nconst PROJECTION_MODE_GLSL_CONSTANTS = Object.keys(PROJECTION_MODE)\n  .map(key => `const int PROJECTION_MODE_${key} = ${PROJECTION_MODE[key]};`)\n  .join('');\nconst UNIT_GLSL_CONSTANTS = Object.keys(UNIT)\n  .map(key => `const int UNIT_${key.toUpperCase()} = ${UNIT[key]};`)\n  .join('');\n\nexport default `\\\n${COORDINATE_SYSTEM_GLSL_CONSTANTS}\n${PROJECTION_MODE_GLSL_CONSTANTS}\n${UNIT_GLSL_CONSTANTS}\n\nuniform int project_uCoordinateSystem;\nuniform int project_uProjectionMode;\nuniform float project_uScale;\nuniform bool project_uWrapLongitude;\nuniform vec3 project_uCommonUnitsPerMeter;\nuniform vec3 project_uCommonUnitsPerWorldUnit;\nuniform vec3 project_uCommonUnitsPerWorldUnit2;\nuniform vec4 project_uCenter;\nuniform mat4 project_uModelMatrix;\nuniform mat4 project_uViewProjectionMatrix;\nuniform vec2 project_uViewportSize;\nuniform float project_uDevicePixelRatio;\nuniform float project_uFocalDistance;\nuniform vec3 project_uCameraPosition;\nuniform vec3 project_uCoordinateOrigin;\nuniform vec3 project_uCommonOrigin;\nuniform bool project_uPseudoMeters;\n\nconst float TILE_SIZE = 512.0;\nconst float PI = 3.1415926536;\nconst float WORLD_SCALE = TILE_SIZE / (PI * 2.0);\nconst vec3 ZERO_64_LOW = vec3(0.0);\nconst float EARTH_RADIUS = 6370972.0; // meters\nconst float GLOBE_RADIUS = 256.0;\n\n// returns an adjustment factor for uCommonUnitsPerMeter\nfloat project_size_at_latitude(float lat) {\n  float y = clamp(lat, -89.9, 89.9);\n  return 1.0 / cos(radians(y));\n}\n\nfloat project_size() {\n  if (project_uProjectionMode == PROJECTION_MODE_WEB_MERCATOR &&\n    project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT &&\n    project_uPseudoMeters == false) {\n\n    // uCommonUnitsPerMeter in low-zoom Web Mercator is non-linear\n    // Adjust by 1 / cos(latitude)\n    // If geometry.position (vertex in common space) is populated, use it\n    // Otherwise use geometry.worldPosition (anchor in world space)\n    \n    if (geometry.position.w == 0.0) {\n      return project_size_at_latitude(geometry.worldPosition.y);\n    }\n\n    // latitude from common y: 2.0 * (atan(exp(y / TILE_SIZE * 2.0 * PI - PI)) - PI / 4.0)\n    // Taylor series of 1 / cos(latitude)\n    // Max error < 0.003\n  \n    float y = geometry.position.y / TILE_SIZE * 2.0 - 1.0;\n    float y2 = y * y;\n    float y4 = y2 * y2;\n    float y6 = y4 * y2;\n    return 1.0 + 4.9348 * y2 + 4.0587 * y4 + 1.5642 * y6;\n  }\n  return 1.0;\n}\n\nfloat project_size_at_latitude(float meters, float lat) {\n  return meters * project_uCommonUnitsPerMeter.z * project_size_at_latitude(lat);\n}\n\n//\n// Scaling offsets - scales meters to \"world distance\"\n// Note the scalar version of project_size is for scaling the z component only\n//\nfloat project_size(float meters) {\n  return meters * project_uCommonUnitsPerMeter.z * project_size();\n}\n\nvec2 project_size(vec2 meters) {\n  return meters * project_uCommonUnitsPerMeter.xy * project_size();\n}\n\nvec3 project_size(vec3 meters) {\n  return meters * project_uCommonUnitsPerMeter * project_size();\n}\n\nvec4 project_size(vec4 meters) {\n  return vec4(meters.xyz * project_uCommonUnitsPerMeter, meters.w);\n}\n\n// Get rotation matrix that aligns the z axis with the given up vector\n// Find 3 unit vectors ux, uy, uz that are perpendicular to each other and uz == up\nmat3 project_get_orientation_matrix(vec3 up) {\n  vec3 uz = normalize(up);\n  // Tangent on XY plane\n  vec3 ux = abs(uz.z) == 1.0 ? vec3(1.0, 0.0, 0.0) : normalize(vec3(uz.y, -uz.x, 0));\n  vec3 uy = cross(uz, ux);\n  return mat3(ux, uy, uz);\n}\n\nbool project_needs_rotation(vec3 commonPosition, out mat3 transform) {\n  if (project_uProjectionMode == PROJECTION_MODE_GLOBE) {\n    transform = project_get_orientation_matrix(commonPosition);\n    return true;\n  }\n  return false;\n}\n\n//\n// Projecting normal - transform deltas from current coordinate system to\n// normals in the worldspace\n//\nvec3 project_normal(vec3 vector) {\n  // Apply model matrix\n  vec4 normal_modelspace = project_uModelMatrix * vec4(vector, 0.0);\n  vec3 n = normalize(normal_modelspace.xyz * project_uCommonUnitsPerMeter);\n  mat3 rotation;\n  if (project_needs_rotation(geometry.position.xyz, rotation)) {\n    n = rotation * n;\n  }\n  return n;\n}\n\nvec4 project_offset_(vec4 offset) {\n  float dy = offset.y;\n  vec3 commonUnitsPerWorldUnit = project_uCommonUnitsPerWorldUnit + project_uCommonUnitsPerWorldUnit2 * dy;\n  return vec4(offset.xyz * commonUnitsPerWorldUnit, offset.w);\n}\n\n//\n// Projecting positions - non-linear projection: lnglats => unit tile [0-1, 0-1]\n//\nvec2 project_mercator_(vec2 lnglat) {\n  float x = lnglat.x;\n  if (project_uWrapLongitude) {\n    x = mod(x + 180., 360.0) - 180.;\n  }\n  float y = clamp(lnglat.y, -89.9, 89.9);\n  return vec2(\n    radians(x) + PI,\n    PI + log(tan_fp32(PI * 0.25 + radians(y) * 0.5))\n  ) * WORLD_SCALE;\n}\n\nvec3 project_globe_(vec3 lnglatz) {\n  float lambda = radians(lnglatz.x);\n  float phi = radians(lnglatz.y);\n  float cosPhi = cos(phi);\n  float D = (lnglatz.z / EARTH_RADIUS + 1.0) * GLOBE_RADIUS;\n\n  return vec3(\n    sin(lambda) * cosPhi,\n    -cos(lambda) * cosPhi,\n    sin(phi)\n  ) * D;\n}\n\n//\n// Projects positions (defined by project_uCoordinateSystem) to common space (defined by project_uProjectionMode)\n//\nvec4 project_position(vec4 position, vec3 position64Low) {\n  vec4 position_world = project_uModelMatrix * position;\n\n  // Work around for a Mac+NVIDIA bug https://github.com/visgl/deck.gl/issues/4145\n  if (project_uProjectionMode == PROJECTION_MODE_WEB_MERCATOR) {\n    if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT) {\n      return vec4(\n        project_mercator_(position_world.xy),\n        project_size_at_latitude(position_world.z, position_world.y),\n        position_world.w\n      );\n    }\n    if (project_uCoordinateSystem == COORDINATE_SYSTEM_CARTESIAN) {\n      position_world.xyz += project_uCoordinateOrigin;\n    }\n  }\n  if (project_uProjectionMode == PROJECTION_MODE_GLOBE) {\n    if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT) {\n      return vec4(\n        project_globe_(position_world.xyz),\n        position_world.w\n      );\n    }\n  }\n  if (project_uProjectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET) {\n    if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT) {\n      if (abs(position_world.y - project_uCoordinateOrigin.y) > 0.25) {\n        // Too far from the projection center for offset mode to be accurate\n        // Only use high parts\n        return vec4(\n          project_mercator_(position_world.xy) - project_uCommonOrigin.xy,\n          project_size(position_world.z),\n          position_world.w\n        );\n      }\n    }\n  }\n  if (project_uProjectionMode == PROJECTION_MODE_IDENTITY ||\n    (project_uProjectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET &&\n    (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT ||\n     project_uCoordinateSystem == COORDINATE_SYSTEM_CARTESIAN))) {\n    // Subtract high part of 64 bit value. Convert remainder to float32, preserving precision.\n    position_world.xyz -= project_uCoordinateOrigin;\n  }\n\n  // Translation is already added to the high parts\n  return project_offset_(position_world + project_uModelMatrix * vec4(position64Low, 0.0));\n}\n\nvec4 project_position(vec4 position) {\n  return project_position(position, ZERO_64_LOW);\n}\n\nvec3 project_position(vec3 position, vec3 position64Low) {\n  vec4 projected_position = project_position(vec4(position, 1.0), position64Low);\n  return projected_position.xyz;\n}\n\nvec3 project_position(vec3 position) {\n  vec4 projected_position = project_position(vec4(position, 1.0), ZERO_64_LOW);\n  return projected_position.xyz;\n}\n\nvec2 project_position(vec2 position) {\n  vec4 projected_position = project_position(vec4(position, 0.0, 1.0), ZERO_64_LOW);\n  return projected_position.xy;\n}\n\nvec4 project_common_position_to_clipspace(vec4 position, mat4 viewProjectionMatrix, vec4 center) {\n  return viewProjectionMatrix * position + center;\n}\n\n//\n// Projects from common space coordinates to clip space.\n// Uses project_uViewProjectionMatrix\n//\nvec4 project_common_position_to_clipspace(vec4 position) {\n  return project_common_position_to_clipspace(position, project_uViewProjectionMatrix, project_uCenter);\n}\n\n// Returns a clip space offset that corresponds to a given number of screen pixels\nvec2 project_pixel_size_to_clipspace(vec2 pixels) {\n  vec2 offset = pixels / project_uViewportSize * project_uDevicePixelRatio * 2.0;\n  return offset * project_uFocalDistance;\n}\n\nfloat project_size_to_pixel(float meters) {\n  return project_size(meters) * project_uScale;\n}\nfloat project_size_to_pixel(float size, int unit) {\n  if (unit == UNIT_METERS) return project_size_to_pixel(size);\n  if (unit == UNIT_COMMON) return size * project_uScale;\n  // UNIT_PIXELS\n  return size;\n}\nfloat project_pixel_size(float pixels) {\n  return pixels / project_uScale;\n}\nvec2 project_pixel_size(vec2 pixels) {\n  return pixels / project_uScale;\n}\n`;\n"},"lineCount":null}},"error":null,"hash":"2fe748080e50fb8322ec9cbf2c20e599","cacheData":{"env":{}}}